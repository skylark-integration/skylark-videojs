{"version":3,"sources":["modal-dialog.js"],"names":["define","document","Dom","Component","keycode","MODAL_CLASS_NAME","ModalDialog","[object Object]","player","options","super","this","opened_","hasBeenOpened_","hasBeenFilled_","closeable","options_","uncloseable","content","contentEl_","createEl","className","role","descEl_","id","el","getAttribute","textContent","description","el_","appendChild","buildCSSClass","tabIndex","aria-describedby","aria-hidden","aria-label","label","previouslyActiveEl_","dispose","localize","desc","trigger","fillAlways","fill","wasPlaying_","paused","pauseOnOpen","pause","listenTo","handleKeyDown","hadControls_","controls","show","conditionalFocus_","setAttribute","value","play","unlistenTo","hide","conditionalBlur_","temporary","closeable_","close","getChild","temp","addChild","controlText","removeChild","fillWith","contentEl","parentEl","parentNode","nextSiblingEl","nextSibling","empty","insertContent","insertBefore","closeButton","emptyEl","content_","activeEl","activeElement","playerEl","player_","contains","focus","event","stopPropagation","isEventKey","preventDefault","focusableEls","focusableEls_","querySelector","focusIndex","i","length","shiftKey","allChildren","querySelectorAll","Array","prototype","filter","call","child","window","HTMLAnchorElement","HTMLAreaElement","hasAttribute","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLIFrameElement","HTMLObjectElement","HTMLEmbedElement","registerComponent"],"mappings":"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","file":"../modal-dialog.js","sourcesContent":["define([\n    'skylark-langx-globals/document',\n    './utils/dom',\n    './component',\n    './utils/keycode'\n], function (document,Dom, Component, keycode) {\n    'use strict';\n    const MODAL_CLASS_NAME = 'vjs-modal-dialog';\n    class ModalDialog extends Component {\n        constructor(player, options) {\n            super(player, options);\n            this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;\n            this.closeable(!this.options_.uncloseable);\n            this.content(this.options_.content);\n            this.contentEl_ = Dom.createEl('div', { className: `${ MODAL_CLASS_NAME }-content` }, { role: 'document' });\n            this.descEl_ = Dom.createEl('p', {\n                className: `${ MODAL_CLASS_NAME }-description vjs-control-text`,\n                id: this.el().getAttribute('aria-describedby')\n            });\n            Dom.textContent(this.descEl_, this.description());\n            this.el_.appendChild(this.descEl_);\n            this.el_.appendChild(this.contentEl_);\n        }\n        createEl() {\n            return super.createEl('div', {\n                className: this.buildCSSClass(),\n                tabIndex: -1\n            }, {\n                'aria-describedby': `${ this.id() }_description`,\n                'aria-hidden': 'true',\n                'aria-label': this.label(),\n                'role': 'dialog'\n            });\n        }\n        dispose() {\n            this.contentEl_ = null;\n            this.descEl_ = null;\n            this.previouslyActiveEl_ = null;\n            super.dispose();\n        }\n        buildCSSClass() {\n            return `${ MODAL_CLASS_NAME } vjs-hidden ${ super.buildCSSClass() }`;\n        }\n        label() {\n            return this.localize(this.options_.label || 'Modal Window');\n        }\n        description() {\n            let desc = this.options_.description || this.localize('This is a modal window.');\n            if (this.closeable()) {\n                desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');\n            }\n            return desc;\n        }\n        open() {\n            if (!this.opened_) {\n                const player = this.player();\n                this.trigger('beforemodalopen');\n                this.opened_ = true;\n                if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {\n                    this.fill();\n                }\n                this.wasPlaying_ = !player.paused();\n                if (this.options_.pauseOnOpen && this.wasPlaying_) {\n                    player.pause();\n                }\n                this.listenTo('keydown', this.handleKeyDown);\n                this.hadControls_ = player.controls();\n                player.controls(false);\n                this.show();\n                this.conditionalFocus_();\n                this.el().setAttribute('aria-hidden', 'false');\n                this.trigger('modalopen');\n                this.hasBeenOpened_ = true;\n            }\n        }\n        opened(value) {\n            if (typeof value === 'boolean') {\n                this[value ? 'open' : 'close']();\n            }\n            return this.opened_;\n        }\n        close() {\n            if (!this.opened_) {\n                return;\n            }\n            const player = this.player();\n            this.trigger('beforemodalclose');\n            this.opened_ = false;\n            if (this.wasPlaying_ && this.options_.pauseOnOpen) {\n                player.play();\n            }\n            this.unlistenTo('keydown', this.handleKeyDown);\n            if (this.hadControls_) {\n                player.controls(true);\n            }\n            this.hide();\n            this.el().setAttribute('aria-hidden', 'true');\n            this.trigger('modalclose');\n            this.conditionalBlur_();\n            if (this.options_.temporary) {\n                this.dispose();\n            }\n        }\n        closeable(value) {\n            if (typeof value === 'boolean') {\n                const closeable = this.closeable_ = !!value;\n                let close = this.getChild('closeButton');\n                if (closeable && !close) {\n                    const temp = this.contentEl_;\n                    this.contentEl_ = this.el_;\n                    close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });\n                    this.contentEl_ = temp;\n                    this.listenTo(close, 'close', this.close);\n                }\n                if (!closeable && close) {\n                    this.unlistenTo(close, 'close', this.close);\n                    this.removeChild(close);\n                    close.dispose();\n                }\n            }\n            return this.closeable_;\n        }\n        fill() {\n            this.fillWith(this.content());\n        }\n        fillWith(content) {\n            const contentEl = this.contentEl();\n            const parentEl = contentEl.parentNode;\n            const nextSiblingEl = contentEl.nextSibling;\n            this.trigger('beforemodalfill');\n            this.hasBeenFilled_ = true;\n            parentEl.removeChild(contentEl);\n            this.empty();\n            Dom.insertContent(contentEl, content);\n            this.trigger('modalfill');\n            if (nextSiblingEl) {\n                parentEl.insertBefore(contentEl, nextSiblingEl);\n            } else {\n                parentEl.appendChild(contentEl);\n            }\n            const closeButton = this.getChild('closeButton');\n            if (closeButton) {\n                parentEl.appendChild(closeButton.el_);\n            }\n        }\n        empty() {\n            this.trigger('beforemodalempty');\n            Dom.emptyEl(this.contentEl());\n            this.trigger('modalempty');\n        }\n        content(value) {\n            if (typeof value !== 'undefined') {\n                this.content_ = value;\n            }\n            return this.content_;\n        }\n        conditionalFocus_() {\n            const activeEl = document.activeElement;\n            const playerEl = this.player_.el_;\n            this.previouslyActiveEl_ = null;\n            if (playerEl.contains(activeEl) || playerEl === activeEl) {\n                this.previouslyActiveEl_ = activeEl;\n                this.focus();\n            }\n        }\n        conditionalBlur_() {\n            if (this.previouslyActiveEl_) {\n                this.previouslyActiveEl_.focus();\n                this.previouslyActiveEl_ = null;\n            }\n        }\n        handleKeyDown(event) {\n            event.stopPropagation();\n            if (keycode.isEventKey(event, 'Escape') && this.closeable()) {\n                event.preventDefault();\n                this.close();\n                return;\n            }\n            if (!keycode.isEventKey(event, 'Tab')) {\n                return;\n            }\n            const focusableEls = this.focusableEls_();\n            const activeEl = this.el_.querySelector(':focus');\n            let focusIndex;\n            for (let i = 0; i < focusableEls.length; i++) {\n                if (activeEl === focusableEls[i]) {\n                    focusIndex = i;\n                    break;\n                }\n            }\n            if (document.activeElement === this.el_) {\n                focusIndex = 0;\n            }\n            if (event.shiftKey && focusIndex === 0) {\n                focusableEls[focusableEls.length - 1].focus();\n                event.preventDefault();\n            } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {\n                focusableEls[0].focus();\n                event.preventDefault();\n            }\n        }\n        focusableEls_() {\n            const allChildren = this.el_.querySelectorAll('*');\n            return Array.prototype.filter.call(allChildren, child => {\n                return (child instanceof window.HTMLAnchorElement || child instanceof window.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window.HTMLInputElement || child instanceof window.HTMLSelectElement || child instanceof window.HTMLTextAreaElement || child instanceof window.HTMLButtonElement) && !child.hasAttribute('disabled') || (child instanceof window.HTMLIFrameElement || child instanceof window.HTMLObjectElement || child instanceof window.HTMLEmbedElement) || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');\n            });\n        }\n    }\n    ModalDialog.prototype.options_ = {\n        pauseOnOpen: true,\n        temporary: true\n    };\n    Component.registerComponent('ModalDialog', ModalDialog);\n    return ModalDialog;\n});"]}