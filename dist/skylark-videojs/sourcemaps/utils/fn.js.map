{"version":3,"sources":["utils/fn.js"],"names":["define","funcs","GUID","UPDATE_REFRESH_INTERVAL","bind","context","fn","uid","guid","newGUID","bound","throttle","debounce"],"mappings":";;;;;;;AAAAA,QACI,sBACA,UACD,SAAUC,EAAMC,GACf,aA8CA,OACIC,wBA9C4B,GA+C5BC,KA9CS,SAAUC,EAASC,EAAIC,GAC3BD,EAAGE,OACJF,EAAGE,KAAON,EAAKO,WAEnB,MAAMC,EAAQJ,EAAGF,KAAKC,GAEtB,OADAK,EAAMF,KAAOD,EAAMA,EAAM,IAAMD,EAAGE,KAAOF,EAAGE,KACrCE,GAyCPC,SAAUV,EAAMU,SAChBC,SAAUX,EAAMW","file":"../../utils/fn.js","sourcesContent":["define([\n    'skylark-langx-funcs',\n    './guid'\n], function (funcs,GUID) {\n    'use strict';\n    const UPDATE_REFRESH_INTERVAL = 30;\n    const bind = function (context, fn, uid) {\n        if (!fn.guid) {\n            fn.guid = GUID.newGUID();\n        }\n        const bound = fn.bind(context);\n        bound.guid = uid ? uid + '_' + fn.guid : fn.guid;\n        return bound;\n    };\n    const throttle = function (fn, wait) {\n        let last = window.performance.now();\n        const throttled = function (...args) {\n            const now = window.performance.now();\n            if (now - last >= wait) {\n                fn(...args);\n                last = now;\n            }\n        };\n        return throttled;\n    };\n    const debounce = function (func, wait, immediate, context = window) {\n        let timeout;\n        const cancel = () => {\n            context.clearTimeout(timeout);\n            timeout = null;\n        };\n        const debounced = function () {\n            const self = this;\n            const args = arguments;\n            let later = function () {\n                timeout = null;\n                later = null;\n                if (!immediate) {\n                    func.apply(self, args);\n                }\n            };\n            if (!timeout && immediate) {\n                func.apply(self, args);\n            }\n            context.clearTimeout(timeout);\n            timeout = context.setTimeout(later, wait);\n        };\n        debounced.cancel = cancel;\n        return debounced;\n    };\n    return {\n        UPDATE_REFRESH_INTERVAL: UPDATE_REFRESH_INTERVAL,\n        bind: bind,\n        throttle: funcs.throttle, //throttle,\n        debounce: funcs.debounce //debounce\n    };\n});"]}