{"version":3,"sources":["utils/obj.js"],"names":["define","langx","each","object","fn","reduce","assign","mixin","isObject","isPlain","isPlainObject"],"mappings":";;;;;;;AAAAA,QACI,iBACF,SAAUC,GACR,aAmCA,OACIC,KAAO,SAASC,EAAOC,GACnB,OAAOH,EAAMC,KAAKC,EAAOC,GAAG,IAEhCC,OAAQJ,EAAMI,OACdC,OAAQL,EAAMM,MACdC,SAAUP,EAAMO,SAChBC,QAASR,EAAMS","file":"../../utils/obj.js","sourcesContent":["define([\n    \"skylark-langx\"\n],function (langx) {\n    'use strict';\n\n    /*\n    const toString = Object.prototype.toString;\n    const keys = function (object) {\n        return isObject(object) ? Object.keys(object) : [];\n    };\n    function each(object, fn) {\n        keys(object).forEach(key => fn(object[key], key));\n    }\n    function reduce(object, fn, initial = 0) {\n        return keys(object).reduce((accum, key) => fn(accum, object[key], key), initial);\n    }\n    function assign(target, ...sources) {\n        if (Object.assign) {\n            return Object.assign(target, ...sources);\n        }\n        sources.forEach(source => {\n            if (!source) {\n                return;\n            }\n            each(source, (value, key) => {\n                target[key] = value;\n            });\n        });\n        return target;\n    }\n    function isObject(value) {\n        return !!value && typeof value === 'object';\n    }\n    function isPlain(value) {\n        return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\n    }\n\n    */\n    return {\n        each : function(object,fn) {\n            return langx.each(object,fn,true/*isForEach*/);\n        },\n        reduce: langx.reduce,\n        assign: langx.mixin,\n        isObject: langx.isObject,\n        isPlain: langx.isPlainObject\n    };\n});"]}