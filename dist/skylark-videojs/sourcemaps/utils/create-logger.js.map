{"version":3,"sources":["utils/create-logger.js"],"names":["define","history","createLogger","name","logByType","level","log","args","type","lvl","levels","lvlRegExp","RegExp","unshift","toUpperCase","push","concat","splice","length","window","console","fn","info","test","Array","isArray","LogByTypeFactory","subname","all","off","debug","warn","error","DEFAULT","hasOwnProperty","Error","filter","fname","historyItem","clear","disable","enable"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,KAyBJ,OAAO,SAASC,EAAaC,GACzB,IACIC,EADAC,EAAQ,OAEZ,MAAMC,EAAM,YAAaC,GACrBH,EAAU,MAAOC,EAAOE,IA+C5B,OA7CAH,EA9BqB,EAACD,EAAMG,IAAQ,CAACE,EAAMH,EAAOE,KAClD,MAAME,EAAMH,EAAII,OAAOL,GACjBM,EAAY,IAAIC,YAAaH,OAKnC,GAJa,QAATD,GACAD,EAAKM,QAAQL,EAAKM,cAAgB,KAEtCP,EAAKM,QAAQV,EAAO,KAChBF,EAAS,CACTA,EAAQc,QAAQC,OAAOT,IACvB,MAAMU,EAAShB,EAAQiB,OAAS,IAChCjB,EAAQgB,OAAO,EAAGA,EAAS,EAAIA,EAAS,GAE5C,IAAKE,OAAOC,QACR,OAEJ,IAAIC,EAAKF,OAAOC,QAAQZ,GACnBa,GAAe,UAATb,IACPa,EAAKF,OAAOC,QAAQE,MAAQH,OAAOC,QAAQd,KAE1Ce,GAAOZ,GAAQE,EAAUY,KAAKf,IAGnCa,EAAGG,MAAMC,QAAQlB,GAAQ,QAAU,QAAQY,OAAOC,QAASb,IAQ/CmB,CAAiBvB,EAAMG,GACnCA,EAAIJ,aAAeyB,CAAAA,GAAWzB,EAAaC,EAAO,KAAOwB,IACzDrB,EAAII,QACAkB,IAAK,uBACLC,IAAK,GACLC,MAAO,uBACPR,KAAM,iBACNS,KAAM,aACNC,MAAO,QACPC,QAAS5B,GAEbC,EAAID,MAAQI,CAAAA,IACR,GAAmB,iBAARA,EAAkB,CACzB,IAAKH,EAAII,OAAOwB,eAAezB,GAC3B,MAAM,IAAI0B,UAAW1B,+BAEzBJ,EAAQI,EAEZ,OAAOJ,KAEXC,EAAIL,QAAU,KAAMA,KAAae,OAAOf,QAC5BmC,OAASC,CAAAA,IACTpC,OAAemC,OAAOE,GACnB,IAAI1B,YAAayB,OAAYd,KAAKe,EAAY,MAG7DhC,EAAIL,QAAQsC,MAAQ,MACZtC,IACAA,EAAQiB,OAAS,KAGzBZ,EAAIL,QAAQuC,QAAU,MACF,OAAZvC,IACAA,EAAQiB,OAAS,EACjBjB,EAAU,QAGlBK,EAAIL,QAAQwC,OAAS,MACD,OAAZxC,IACAA,QAGRK,EAAI0B,MAAQ,KAAIzB,IAASH,EAAU,QAASC,EAAOE,IACnDD,EAAIyB,KAAO,KAAIxB,IAASH,EAAU,OAAQC,EAAOE,IACjDD,EAAIwB,MAAQ,KAAIvB,IAASH,EAAU,QAASC,EAAOE,IAC5CD","file":"../../utils/create-logger.js","sourcesContent":["define([], function () {\n    'use strict';\n    let history = [];\n    const LogByTypeFactory = (name, log) => (type, level, args) => {\n        const lvl = log.levels[level];\n        const lvlRegExp = new RegExp(`^(${ lvl })$`);\n        if (type !== 'log') {\n            args.unshift(type.toUpperCase() + ':');\n        }\n        args.unshift(name + ':');\n        if (history) {\n            history.push([].concat(args));\n            const splice = history.length - 1000;\n            history.splice(0, splice > 0 ? splice : 0);\n        }\n        if (!window.console) {\n            return;\n        }\n        let fn = window.console[type];\n        if (!fn && type === 'debug') {\n            fn = window.console.info || window.console.log;\n        }\n        if (!fn || !lvl || !lvlRegExp.test(type)) {\n            return;\n        }\n        fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);\n    };\n    return function createLogger(name) {\n        let level = 'info';\n        let logByType;\n        const log = function (...args) {\n            logByType('log', level, args);\n        };\n        logByType = LogByTypeFactory(name, log);\n        log.createLogger = subname => createLogger(name + ': ' + subname);\n        log.levels = {\n            all: 'debug|log|warn|error',\n            off: '',\n            debug: 'debug|log|warn|error',\n            info: 'log|warn|error',\n            warn: 'warn|error',\n            error: 'error',\n            DEFAULT: level\n        };\n        log.level = lvl => {\n            if (typeof lvl === 'string') {\n                if (!log.levels.hasOwnProperty(lvl)) {\n                    throw new Error(`\"${ lvl }\" in not a valid log level`);\n                }\n                level = lvl;\n            }\n            return level;\n        };\n        log.history = () => history ? [].concat(history) : [];\n        log.history.filter = fname => {\n            return (history || []).filter(historyItem => {\n                return new RegExp(`.*${ fname }.*`).test(historyItem[0]);\n            });\n        };\n        log.history.clear = () => {\n            if (history) {\n                history.length = 0;\n            }\n        };\n        log.history.disable = () => {\n            if (history !== null) {\n                history.length = 0;\n                history = null;\n            }\n        };\n        log.history.enable = () => {\n            if (history === null) {\n                history = [];\n            }\n        };\n        log.error = (...args) => logByType('error', level, args);\n        log.warn = (...args) => logByType('warn', level, args);\n        log.debug = (...args) => logByType('debug', level, args);\n        return log;\n    };\n});"]}