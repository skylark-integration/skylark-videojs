{"version":3,"sources":["utils/mimetypes.js"],"names":["define","Url","MimetypesKind","opus","ogv","mp4","mov","m4v","mkv","m4a","mp3","aac","caf","flac","oga","wav","m3u8","jpg","jpeg","gif","png","svg","webp","getMimetype","src","ext","getFileExtension","toLowerCase","findMimetype","player","cache_","source","type","matchingSources","sources","filter","s","length","$$","i"],"mappings":";;;;;;;AAAAA,QAAQ,SAAU,SAAUC,GACxB,aACA,MAAMC,GACFC,KAAM,YACNC,IAAK,YACLC,IAAK,YACLC,IAAK,YACLC,IAAK,YACLC,IAAK,mBACLC,IAAK,YACLC,IAAK,aACLC,IAAK,YACLC,IAAK,cACLC,KAAM,aACNC,IAAK,YACLC,IAAK,YACLC,KAAM,wBACNC,IAAK,aACLC,KAAM,aACNC,IAAK,YACLC,IAAK,YACLC,IAAK,gBACLC,KAAM,cAEJC,EAAc,SAAUC,EAAM,IAChC,MAAMC,EAAMxB,EAAIyB,iBAAiBF,GAEjC,OADiBtB,EAAcuB,EAAIE,gBAChB,IAsBvB,OACIzB,cAAeA,EACfqB,YAAaA,EACbK,aAvBiB,CAACC,EAAQL,KAC1B,IAAKA,EACD,MAAO,GAEX,GAAIK,EAAOC,OAAOC,OAAOP,MAAQA,GAAOK,EAAOC,OAAOC,OAAOC,KACzD,OAAOH,EAAOC,OAAOC,OAAOC,KAEhC,MAAMC,EAAkBJ,EAAOC,OAAOI,QAAQC,OAAOC,GAAKA,EAAEZ,MAAQA,GACpE,GAAIS,EAAgBI,OAChB,OAAOJ,EAAgB,GAAGD,KAE9B,MAAME,EAAUL,EAAOS,GAAG,UAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAQG,OAAQE,IAAK,CACrC,MAAMH,EAAIF,EAAQK,GAClB,GAAIH,EAAEJ,MAAQI,EAAEZ,KAAOY,EAAEZ,MAAQA,EAC7B,OAAOY,EAAEJ,KAGjB,OAAOT,EAAYC","file":"../../utils/mimetypes.js","sourcesContent":["define(['./url'], function (Url) {\n    'use strict';\n    const MimetypesKind = {\n        opus: 'video/ogg',\n        ogv: 'video/ogg',\n        mp4: 'video/mp4',\n        mov: 'video/mp4',\n        m4v: 'video/mp4',\n        mkv: 'video/x-matroska',\n        m4a: 'audio/mp4',\n        mp3: 'audio/mpeg',\n        aac: 'audio/aac',\n        caf: 'audio/x-caf',\n        flac: 'audio/flac',\n        oga: 'audio/ogg',\n        wav: 'audio/wav',\n        m3u8: 'application/x-mpegURL',\n        jpg: 'image/jpeg',\n        jpeg: 'image/jpeg',\n        gif: 'image/gif',\n        png: 'image/png',\n        svg: 'image/svg+xml',\n        webp: 'image/webp'\n    };\n    const getMimetype = function (src = '') {\n        const ext = Url.getFileExtension(src);\n        const mimetype = MimetypesKind[ext.toLowerCase()];\n        return mimetype || '';\n    };\n    const findMimetype = (player, src) => {\n        if (!src) {\n            return '';\n        }\n        if (player.cache_.source.src === src && player.cache_.source.type) {\n            return player.cache_.source.type;\n        }\n        const matchingSources = player.cache_.sources.filter(s => s.src === src);\n        if (matchingSources.length) {\n            return matchingSources[0].type;\n        }\n        const sources = player.$$('source');\n        for (let i = 0; i < sources.length; i++) {\n            const s = sources[i];\n            if (s.type && s.src && s.src === src) {\n                return s.type;\n            }\n        }\n        return getMimetype(src);\n    };\n    return {\n        MimetypesKind: MimetypesKind,\n        getMimetype: getMimetype,\n        findMimetype: findMimetype\n    };\n});"]}