{"version":3,"sources":["utils/xhr.js"],"names":["define","window","objects","types","_Xhr","parseHeaders","headers","result","trim","split","forEach","row","index","indexOf","key","slice","toLowerCase","value","Array","isArray","push","initParams","uri","options","callback","params","isFunction","mixin","createXHR","_createXHR","Error","called","err","response","body","errorFunc","evt","clearTimeout","timeoutTimer","statusCode","failureResponse","loadFunc","aborted","status","useXDR","undefined","xhr","responseText","responseType","responseXML","firefoxBugTakenEffect","documentElement","nodeName","e","getXml","isJson","JSON","parse","getBody","method","url","rawRequest","getAllResponseHeaders","cors","XDomainRequest","XMLHttpRequest","data","sync","json","stringify","onreadystatechange","readyState","setTimeout","onload","onerror","onprogress","onabort","ontimeout","open","username","password","withCredentials","timeout","abort","code","setRequestHeader","hasOwnProperty","obj","i","isEmpty","beforeSend","send","array","iterator","length","forEachArray","toUpperCase","x","request","then","catch"],"mappings":"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","file":"../../utils/xhr.js","sourcesContent":["define([\r\n\t\"skylark-langx-globals/window\",\r\n\t\"skylark-langx-objects\",\r\n\t\"skylark-langx-types\",\r\n\t\"skylark-net-http/Xhr\"\r\n],function(window,objects,types,_Xhr){\r\n\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @license\r\n\t * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>\r\n\t * Copyright (c) 2014 David Bj√∂rklund\r\n\t * Available under the MIT license\r\n\t * <https://github.com/kesla/parse-headers/blob/master/LICENCE>\r\n\t */\r\n\r\n\tvar parseHeaders = function(headers) {\r\n\t    var result = {};\r\n\r\n\t    if (!headers) {\r\n\t        return result;\r\n\t    }\r\n\r\n\t    headers.trim().split('\\n').forEach(function(row) {\r\n\t        var index = row.indexOf(':');\r\n\t        var key = row.slice(0, index).trim().toLowerCase();\r\n\t        var value = row.slice(index + 1).trim();\r\n\r\n\t        if (typeof(result[key]) === 'undefined') {\r\n\t          result[key] = value\r\n\t        } else if (Array.isArray(result[key])) {\r\n\t          result[key].push(value)\r\n\t        } else {\r\n\t          result[key] = [ result[key], value ]\r\n\t        }\r\n\t    });\r\n\r\n\t    return result;\r\n\t};\r\n\r\n\r\n\tcreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\r\n\tcreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\r\n\r\n\tforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\r\n\t    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\r\n\t        options = initParams(uri, options, callback)\r\n\t        options.method = method.toUpperCase()\r\n\t        return _createXHR(options)\r\n\t    }\r\n\t})\r\n\r\n\tfunction forEachArray(array, iterator) {\r\n\t    for (var i = 0; i < array.length; i++) {\r\n\t        iterator(array[i])\r\n\t    }\r\n\t}\r\n\r\n\tfunction isEmpty(obj){\r\n\t    for(var i in obj){\r\n\t        if(obj.hasOwnProperty(i)) return false\r\n\t    }\r\n\t    return true\r\n\t}\r\n\r\n\tfunction initParams(uri, options, callback) {\r\n\t    var params = uri\r\n\r\n\t    if (types.isFunction(options)) {\r\n\t        callback = options\r\n\t        if (typeof uri === \"string\") {\r\n\t            params = {uri:uri}\r\n\t        }\r\n\t    } else {\r\n\t        params = objects.mixin({}, options, {uri: uri})\r\n\t    }\r\n\r\n\t    params.callback = callback\r\n\t    return params\r\n\t}\r\n\r\n\tfunction createXHR(uri, options, callback) {\r\n\t    options = initParams(uri, options, callback)\r\n\t    return _createXHR(options)\r\n\t}\r\n\r\n\tfunction _createXHR(options) {\r\n\t    if(typeof options.callback === \"undefined\"){\r\n\t        throw new Error(\"callback argument missing\")\r\n\t    }\r\n\r\n\t    var called = false\r\n\t    var callback = function cbOnce(err, response, body){\r\n\t        if(!called){\r\n\t            called = true\r\n\t            options.callback(err, response, body)\r\n\t        }\r\n\t    }\r\n\r\n\t    function readystatechange() {\r\n\t        if (xhr.readyState === 4) {\r\n\t            setTimeout(loadFunc, 0)\r\n\t        }\r\n\t    }\r\n\r\n\t    function getBody() {\r\n\t        // Chrome with requestType=blob throws errors arround when even testing access to responseText\r\n\t        var body = undefined\r\n\r\n\t        if (xhr.response) {\r\n\t            body = xhr.response\r\n\t        } else {\r\n\t            body = xhr.responseText || getXml(xhr)\r\n\t        }\r\n\r\n\t        if (isJson) {\r\n\t            try {\r\n\t                body = JSON.parse(body)\r\n\t            } catch (e) {}\r\n\t        }\r\n\r\n\t        return body\r\n\t    }\r\n\r\n\t    function errorFunc(evt) {\r\n\t        clearTimeout(timeoutTimer)\r\n\t        if(!(evt instanceof Error)){\r\n\t            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\r\n\t        }\r\n\t        evt.statusCode = 0\r\n\t        return callback(evt, failureResponse)\r\n\t    }\r\n\r\n\t    // will load the data & process the response in a special response object\r\n\t    function loadFunc() {\r\n\t        if (aborted) return\r\n\t        var status\r\n\t        clearTimeout(timeoutTimer)\r\n\t        if(options.useXDR && xhr.status===undefined) {\r\n\t            //IE8 CORS GET successful response doesn't have a status field, but body is fine\r\n\t            status = 200\r\n\t        } else {\r\n\t            status = (xhr.status === 1223 ? 204 : xhr.status)\r\n\t        }\r\n\t        var response = failureResponse\r\n\t        var err = null\r\n\r\n\t        if (status !== 0){\r\n\t            response = {\r\n\t                body: getBody(),\r\n\t                statusCode: status,\r\n\t                method: method,\r\n\t                headers: {},\r\n\t                url: uri,\r\n\t                rawRequest: xhr\r\n\t            }\r\n\t            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\r\n\t                response.headers = parseHeaders(xhr.getAllResponseHeaders())\r\n\t            }\r\n\t        } else {\r\n\t            err = new Error(\"Internal XMLHttpRequest Error\")\r\n\t        }\r\n\t        return callback(err, response, response.body)\r\n\t    }\r\n\r\n\t    var xhr = options.xhr || null\r\n\r\n\t    if (!xhr) {\r\n\t        if (options.cors || options.useXDR) {\r\n\t            xhr = new createXHR.XDomainRequest()\r\n\t        }else{\r\n\t            xhr = new createXHR.XMLHttpRequest()\r\n\t        }\r\n\t    }\r\n\r\n\t    var key\r\n\t    var aborted\r\n\t    var uri = xhr.url = options.uri || options.url\r\n\t    var method = xhr.method = options.method || \"GET\"\r\n\t    var body = options.body || options.data\r\n\t    var headers = xhr.headers = options.headers || {}\r\n\t    var sync = !!options.sync\r\n\t    var isJson = false\r\n\t    var timeoutTimer\r\n\t    var failureResponse = {\r\n\t        body: undefined,\r\n\t        headers: {},\r\n\t        statusCode: 0,\r\n\t        method: method,\r\n\t        url: uri,\r\n\t        rawRequest: xhr\r\n\t    }\r\n\r\n\t    if (\"json\" in options && options.json !== false) {\r\n\t        isJson = true\r\n\t        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\r\n\t        if (method !== \"GET\" && method !== \"HEAD\") {\r\n\t            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\r\n\t            body = JSON.stringify(options.json === true ? body : options.json)\r\n\t        }\r\n\t    }\r\n\r\n\t    xhr.onreadystatechange = readystatechange\r\n\t    xhr.onload = loadFunc\r\n\t    xhr.onerror = errorFunc\r\n\t    // IE9 must have onprogress be set to a unique function.\r\n\t    xhr.onprogress = function () {\r\n\t        // IE must die\r\n\t    }\r\n\t    xhr.onabort = function(){\r\n\t        aborted = true;\r\n\t    }\r\n\t    xhr.ontimeout = errorFunc\r\n\t    xhr.open(method, uri, !sync, options.username, options.password)\r\n\t    //has to be after open\r\n\t    if(!sync) {\r\n\t        xhr.withCredentials = !!options.withCredentials\r\n\t    }\r\n\t    // Cannot set timeout with sync request\r\n\t    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\r\n\t    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\r\n\t    if (!sync && options.timeout > 0 ) {\r\n\t        timeoutTimer = setTimeout(function(){\r\n\t            if (aborted) return\r\n\t            aborted = true//IE9 may still call readystatechange\r\n\t            xhr.abort(\"timeout\")\r\n\t            var e = new Error(\"XMLHttpRequest timeout\")\r\n\t            e.code = \"ETIMEDOUT\"\r\n\t            errorFunc(e)\r\n\t        }, options.timeout )\r\n\t    }\r\n\r\n\t    if (xhr.setRequestHeader) {\r\n\t        for(key in headers){\r\n\t            if(headers.hasOwnProperty(key)){\r\n\t                xhr.setRequestHeader(key, headers[key])\r\n\t            }\r\n\t        }\r\n\t    } else if (options.headers && !isEmpty(options.headers)) {\r\n\t        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\r\n\t    }\r\n\r\n\t    if (\"responseType\" in options) {\r\n\t        xhr.responseType = options.responseType\r\n\t    }\r\n\r\n\t    if (\"beforeSend\" in options &&\r\n\t        typeof options.beforeSend === \"function\"\r\n\t    ) {\r\n\t        options.beforeSend(xhr)\r\n\t    }\r\n\r\n\t    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\r\n\t    // XMLHttpRequest spec says to pass null as body to indicate no body\r\n\t    // See https://github.com/naugtur/xhr/issues/100.\r\n\t    xhr.send(body || null)\r\n\r\n\t    return xhr\r\n\r\n\r\n\t}\r\n\r\n\tfunction getXml(xhr) {\r\n\t    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\r\n\t    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\r\n\t    try {\r\n\t        if (xhr.responseType === \"document\") {\r\n\t            return xhr.responseXML\r\n\t        }\r\n\t        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\r\n\t        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\r\n\t            return xhr.responseXML\r\n\t        }\r\n\t    } catch (e) {}\r\n\r\n\t    return null\r\n\t}\r\n\r\n\tfunction noop() {}\r\n\r\n\t//return createXHR;\r\n\r\n\r\n\treturn function(uri, options, callback) {\r\n\t    options = initParams(uri, options, callback);\r\n\r\n\t    var x =  _Xhr.request(options.uri,options).then(function(result){\r\n\t    \toptions.callback(null,x,result)\r\n\t    }).catch(function(e,status){\r\n\t    \toptions.callback(e,status);\r\n\t    });\r\n\r\n\t    return x;\r\n\r\n\t};\r\n\r\n\r\n});"]}