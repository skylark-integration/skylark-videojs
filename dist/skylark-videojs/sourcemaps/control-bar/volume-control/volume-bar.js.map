{"version":3,"sources":["control-bar/volume-control/volume-bar.js"],"names":["define","Slider","Component","Dom","VolumeBar","[object Object]","player","options","super","this","listenTo","updateLastVolume_","updateARIAAttributes","ready","createEl","className","aria-label","localize","aria-live","event","isSingleLeftClick","handleMouseDown","checkMuted","player_","volume","calculateDistance","muted","ariaValue","volumeAsPercentage_","el_","setAttribute","Math","round","volumeBeforeDrag","listenToOnce","lastVolume_","prototype","options_","children","barName","playerEvent","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,sBACA,kBACA,kBACA,kBACD,SAAUC,EAAQC,EAAWC,GAC5B,mBACMC,UAAkBH,EACpBI,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdE,KAAKC,SAAS,eAAgBD,KAAKE,mBACnCF,KAAKC,SAASJ,EAAQ,eAAgBG,KAAKG,sBAC3CN,EAAOO,MAAM,IAAMJ,KAAKG,wBAE5BP,WACI,OAAOG,MAAMM,SAAS,OAASC,UAAW,kCACtCC,aAAcP,KAAKQ,SAAS,gBAC5BC,YAAa,WAGrBb,gBAAgBc,GACPhB,EAAIiB,kBAAkBD,IAG3BX,MAAMa,gBAAgBF,GAE1Bd,gBAAgBc,GACPhB,EAAIiB,kBAAkBD,KAG3BV,KAAKa,aACLb,KAAKc,QAAQC,OAAOf,KAAKgB,kBAAkBN,KAE/Cd,aACQI,KAAKc,QAAQG,SACbjB,KAAKc,QAAQG,OAAM,GAG3BrB,aACI,OAAII,KAAKc,QAAQG,QACN,EAEJjB,KAAKc,QAAQC,SAExBnB,cACII,KAAKa,aACLb,KAAKc,QAAQC,OAAOf,KAAKc,QAAQC,SAAW,IAEhDnB,WACII,KAAKa,aACLb,KAAKc,QAAQC,OAAOf,KAAKc,QAAQC,SAAW,IAEhDnB,qBAAqBc,GACjB,MAAMQ,EAAYlB,KAAKc,QAAQG,QAAU,EAAIjB,KAAKmB,sBAClDnB,KAAKoB,IAAIC,aAAa,gBAAiBH,GACvClB,KAAKoB,IAAIC,aAAa,iBAAkBH,EAAY,KAExDtB,sBACI,OAAO0B,KAAKC,MAA8B,IAAxBvB,KAAKc,QAAQC,UAEnCnB,oBACI,MAAM4B,EAAmBxB,KAAKc,QAAQC,SACtCf,KAAKyB,aAAa,iBAAkB,KACF,IAA1BzB,KAAKc,QAAQC,UACbf,KAAKc,QAAQY,YAAYF,MAWzC,OANA7B,EAAUgC,UAAUC,UAChBC,UAAW,eACXC,QAAS,eAEbnC,EAAUgC,UAAUI,YAAc,eAClCtC,EAAUuC,kBAAkB,YAAarC,GAClCA","file":"../../../control-bar/volume-control/volume-bar.js","sourcesContent":["define([\n    '../../slider/slider',\n    '../../component',\n    '../../utils/dom',\n    './volume-level'\n], function (Slider, Component, Dom) {\n    'use strict';\n    class VolumeBar extends Slider {\n        constructor(player, options) {\n            super(player, options);\n            this.listenTo('slideractive', this.updateLastVolume_);\n            this.listenTo(player, 'volumechange', this.updateARIAAttributes);\n            player.ready(() => this.updateARIAAttributes());\n        }\n        createEl() {\n            return super.createEl('div', { className: 'vjs-volume-bar vjs-slider-bar' }, {\n                'aria-label': this.localize('Volume Level'),\n                'aria-live': 'polite'\n            });\n        }\n        handleMouseDown(event) {\n            if (!Dom.isSingleLeftClick(event)) {\n                return;\n            }\n            super.handleMouseDown(event);\n        }\n        handleMouseMove(event) {\n            if (!Dom.isSingleLeftClick(event)) {\n                return;\n            }\n            this.checkMuted();\n            this.player_.volume(this.calculateDistance(event));\n        }\n        checkMuted() {\n            if (this.player_.muted()) {\n                this.player_.muted(false);\n            }\n        }\n        getPercent() {\n            if (this.player_.muted()) {\n                return 0;\n            }\n            return this.player_.volume();\n        }\n        stepForward() {\n            this.checkMuted();\n            this.player_.volume(this.player_.volume() + 0.1);\n        }\n        stepBack() {\n            this.checkMuted();\n            this.player_.volume(this.player_.volume() - 0.1);\n        }\n        updateARIAAttributes(event) {\n            const ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();\n            this.el_.setAttribute('aria-valuenow', ariaValue);\n            this.el_.setAttribute('aria-valuetext', ariaValue + '%');\n        }\n        volumeAsPercentage_() {\n            return Math.round(this.player_.volume() * 100);\n        }\n        updateLastVolume_() {\n            const volumeBeforeDrag = this.player_.volume();\n            this.listenToOnce('sliderinactive', () => {\n                if (this.player_.volume() === 0) {\n                    this.player_.lastVolume_(volumeBeforeDrag);\n                }\n            });\n        }\n    }\n    VolumeBar.prototype.options_ = {\n        children: ['volumeLevel'],\n        barName: 'volumeLevel'\n    };\n    VolumeBar.prototype.playerEvent = 'volumechange';\n    Component.registerComponent('VolumeBar', VolumeBar);\n    return VolumeBar;\n});"]}