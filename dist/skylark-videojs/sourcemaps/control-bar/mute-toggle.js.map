{"version":3,"sources":["control-bar/mute-toggle.js"],"names":["define","Button","Component","Dom","checkMuteSupport","browser","MuteToggle","[object Object]","player","options","super","this","on","update","buildCSSClass","event","vol","player_","volume","lastVolume","lastVolume_","volumeToSet","muted","updateIcon_","updateControlText_","level","IS_IOS","tech_","el_","i","removeClass","addClass","text","controlText","prototype","controlText_","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,YACA,eACA,eACA,sCACA,oBACD,SAAUC,EAAQC,EAAWC,EAAKC,EAAkBC,GACnD,mBACMC,UAAmBL,EACrBM,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdL,EAAiBO,KAAMH,GACvBG,KAAKC,GAAGJ,GACJ,YACA,gBACDG,KAAKE,QAEZN,gBACI,0BAA4BG,MAAMI,kBAEtCP,YAAYQ,GACR,MAAMC,EAAML,KAAKM,QAAQC,SACnBC,EAAaR,KAAKM,QAAQG,cAChC,GAAY,IAARJ,EAAW,CACX,MAAMK,EAAcF,EAAa,GAAM,GAAMA,EAC7CR,KAAKM,QAAQC,OAAOG,GACpBV,KAAKM,QAAQK,OAAM,QAEnBX,KAAKM,QAAQK,OAAMX,KAAKM,QAAQK,SAGxCf,OAAOQ,GACHJ,KAAKY,cACLZ,KAAKa,qBAETjB,cACI,MAAMS,EAAML,KAAKM,QAAQC,SACzB,IAAIO,EAAQ,EACRpB,EAAQqB,QAAUf,KAAKM,QAAQU,OAAShB,KAAKM,QAAQU,MAAMC,KAC3DjB,KAAKM,QAAQK,MAAMX,KAAKM,QAAQU,MAAMC,IAAIN,OAElC,IAARN,GAAaL,KAAKM,QAAQK,QAC1BG,EAAQ,EACDT,EAAM,IACbS,EAAQ,EACDT,EAAM,MACbS,EAAQ,GAEZ,IAAK,IAAII,EAAI,EAAGA,EAAI,EAAGA,IACnB1B,EAAI2B,YAAYnB,KAAKiB,eAAiBC,KAE1C1B,EAAI4B,SAASpB,KAAKiB,eAAiBH,KAEvClB,qBACI,MACMyB,EADWrB,KAAKM,QAAQK,SAAqC,IAA1BX,KAAKM,QAAQC,SAC9B,SAAW,OAC/BP,KAAKsB,gBAAkBD,GACvBrB,KAAKsB,YAAYD,IAM7B,OAFA1B,EAAW4B,UAAUC,aAAe,OACpCjC,EAAUkC,kBAAkB,aAAc9B,GACnCA","file":"../../control-bar/mute-toggle.js","sourcesContent":["define([\n    '../button',\n    '../component',\n    '../utils/dom',\n    './volume-control/check-mute-support',\n    '../utils/browser'\n], function (Button, Component, Dom, checkMuteSupport, browser) {\n    'use strict';\n    class MuteToggle extends Button {\n        constructor(player, options) {\n            super(player, options);\n            checkMuteSupport(this, player);\n            this.on(player, [\n                'loadstart',\n                'volumechange'\n            ], this.update);\n        }\n        buildCSSClass() {\n            return `vjs-mute-control ${ super.buildCSSClass() }`;\n        }\n        handleClick(event) {\n            const vol = this.player_.volume();\n            const lastVolume = this.player_.lastVolume_();\n            if (vol === 0) {\n                const volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;\n                this.player_.volume(volumeToSet);\n                this.player_.muted(false);\n            } else {\n                this.player_.muted(this.player_.muted() ? false : true);\n            }\n        }\n        update(event) {\n            this.updateIcon_();\n            this.updateControlText_();\n        }\n        updateIcon_() {\n            const vol = this.player_.volume();\n            let level = 3;\n            if (browser.IS_IOS && this.player_.tech_ && this.player_.tech_.el_) {\n                this.player_.muted(this.player_.tech_.el_.muted);\n            }\n            if (vol === 0 || this.player_.muted()) {\n                level = 0;\n            } else if (vol < 0.33) {\n                level = 1;\n            } else if (vol < 0.67) {\n                level = 2;\n            }\n            for (let i = 0; i < 4; i++) {\n                Dom.removeClass(this.el_, `vjs-vol-${ i }`);\n            }\n            Dom.addClass(this.el_, `vjs-vol-${ level }`);\n        }\n        updateControlText_() {\n            const soundOff = this.player_.muted() || this.player_.volume() === 0;\n            const text = soundOff ? 'Unmute' : 'Mute';\n            if (this.controlText() !== text) {\n                this.controlText(text);\n            }\n        }\n    }\n    MuteToggle.prototype.controlText_ = 'Mute';\n    Component.registerComponent('MuteToggle', MuteToggle);\n    return MuteToggle;\n});"]}