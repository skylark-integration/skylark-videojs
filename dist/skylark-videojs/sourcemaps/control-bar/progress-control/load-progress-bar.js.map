{"version":3,"sources":["control-bar/progress-control/load-progress-bar.js"],"names":["define","document","Component","Dom","clamp","percentify","time","end","toFixed","LoadProgressBar","[object Object]","player","options","super","this","partEls_","on","update","el","createEl","className","wrapper","loadedText","textContent","localize","separator","createTextNode","percentageEl_","appendChild","dispose","event","requestNamedAnimationFrame","liveTracker","player_","buffered","duration","isLive","seekableEnd","bufferedEnd","children","percent","percent_","el_","style","width","i","length","start","part","dataset","left","removeChild","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,iCACA,kBACA,kBACA,qBACD,SAAUC,EAASC,EAAWC,EAAKC,GAClC,aACA,MAAMC,EAAa,CAACC,EAAMC,IAAQH,EAAME,EAAOC,EAAM,IAAK,EAAG,KAAKC,QAAQ,GAAK,UACzEC,UAAwBP,EAC1BQ,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdE,KAAKC,YACLD,KAAKE,GAAGL,EAAQ,WAAYG,KAAKG,QAErCP,WACI,MAAMQ,EAAKL,MAAMM,SAAS,OAASC,UAAW,sBACxCC,EAAUlB,EAAIgB,SAAS,QAAUC,UAAW,qBAC5CE,EAAanB,EAAIgB,SAAS,QAAUI,YAAaT,KAAKU,SAAS,YAC/DC,EAAYxB,EAASyB,eAAe,MAS1C,OARAZ,KAAKa,cAAgBxB,EAAIgB,SAAS,QAC9BC,UAAW,qCACXG,YAAa,OAEjBL,EAAGU,YAAYP,GACfA,EAAQO,YAAYN,GACpBD,EAAQO,YAAYH,GACpBJ,EAAQO,YAAYd,KAAKa,eAClBT,EAEXR,UACII,KAAKC,SAAW,KAChBD,KAAKa,cAAgB,KACrBd,MAAMgB,UAEVnB,OAAOoB,GACHhB,KAAKiB,2BAA2B,yBAA0B,KACtD,MAAMC,EAAclB,KAAKmB,QAAQD,YAC3BE,EAAWpB,KAAKmB,QAAQC,WACxBC,EAAWH,GAAeA,EAAYI,SAAWJ,EAAYK,cAAgBvB,KAAKmB,QAAQE,WAC1FG,EAAcxB,KAAKmB,QAAQK,cAC3BC,EAAWzB,KAAKC,SAChByB,EAAUnC,EAAWiC,EAAaH,GACpCrB,KAAK2B,WAAaD,IAClB1B,KAAK4B,IAAIC,MAAMC,MAAQJ,EACvBrC,EAAIoB,YAAYT,KAAKa,cAAea,GACpC1B,KAAK2B,SAAWD,GAEpB,IAAK,IAAIK,EAAI,EAAGA,EAAIX,EAASY,OAAQD,IAAK,CACtC,MAAME,EAAQb,EAASa,MAAMF,GACvBtC,EAAM2B,EAAS3B,IAAIsC,GACzB,IAAIG,EAAOT,EAASM,GACfG,IACDA,EAAOlC,KAAK4B,IAAId,YAAYzB,EAAIgB,YAChCoB,EAASM,GAAKG,GAEdA,EAAKC,QAAQF,QAAUA,GAASC,EAAKC,QAAQ1C,MAAQA,IAGzDyC,EAAKC,QAAQF,MAAQA,EACrBC,EAAKC,QAAQ1C,IAAMA,EACnByC,EAAKL,MAAMO,KAAO7C,EAAW0C,EAAOT,GACpCU,EAAKL,MAAMC,MAAQvC,EAAWE,EAAMwC,EAAOT,IAE/C,IAAK,IAAIO,EAAIN,EAASO,OAAQD,EAAIX,EAASY,OAAQD,IAC/C/B,KAAK4B,IAAIS,YAAYZ,EAASM,EAAI,IAEtCN,EAASO,OAASZ,EAASY,UAKvC,OADA5C,EAAUkD,kBAAkB,kBAAmB3C,GACxCA","file":"../../../control-bar/progress-control/load-progress-bar.js","sourcesContent":["define([\n    'skylark-langx-globals/document',\n    '../../component',\n    '../../utils/dom',\n    '../../utils/clamp'\n], function (document,Component, Dom, clamp) {\n    'use strict';\n    const percentify = (time, end) => clamp(time / end * 100, 0, 100).toFixed(2) + '%';\n    class LoadProgressBar extends Component {\n        constructor(player, options) {\n            super(player, options);\n            this.partEls_ = [];\n            this.on(player, 'progress', this.update);\n        }\n        createEl() {\n            const el = super.createEl('div', { className: 'vjs-load-progress' });\n            const wrapper = Dom.createEl('span', { className: 'vjs-control-text' });\n            const loadedText = Dom.createEl('span', { textContent: this.localize('Loaded') });\n            const separator = document.createTextNode(': ');\n            this.percentageEl_ = Dom.createEl('span', {\n                className: 'vjs-control-text-loaded-percentage',\n                textContent: '0%'\n            });\n            el.appendChild(wrapper);\n            wrapper.appendChild(loadedText);\n            wrapper.appendChild(separator);\n            wrapper.appendChild(this.percentageEl_);\n            return el;\n        }\n        dispose() {\n            this.partEls_ = null;\n            this.percentageEl_ = null;\n            super.dispose();\n        }\n        update(event) {\n            this.requestNamedAnimationFrame('LoadProgressBar#update', () => {\n                const liveTracker = this.player_.liveTracker;\n                const buffered = this.player_.buffered();\n                const duration = liveTracker && liveTracker.isLive() ? liveTracker.seekableEnd() : this.player_.duration();\n                const bufferedEnd = this.player_.bufferedEnd();\n                const children = this.partEls_;\n                const percent = percentify(bufferedEnd, duration);\n                if (this.percent_ !== percent) {\n                    this.el_.style.width = percent;\n                    Dom.textContent(this.percentageEl_, percent);\n                    this.percent_ = percent;\n                }\n                for (let i = 0; i < buffered.length; i++) {\n                    const start = buffered.start(i);\n                    const end = buffered.end(i);\n                    let part = children[i];\n                    if (!part) {\n                        part = this.el_.appendChild(Dom.createEl());\n                        children[i] = part;\n                    }\n                    if (part.dataset.start === start && part.dataset.end === end) {\n                        continue;\n                    }\n                    part.dataset.start = start;\n                    part.dataset.end = end;\n                    part.style.left = percentify(start, bufferedEnd);\n                    part.style.width = percentify(end - start, bufferedEnd);\n                }\n                for (let i = children.length; i > buffered.length; i--) {\n                    this.el_.removeChild(children[i - 1]);\n                }\n                children.length = buffered.length;\n            });\n        }\n    }\n    Component.registerComponent('LoadProgressBar', LoadProgressBar);\n    return LoadProgressBar;\n});"]}