{"version":3,"sources":["control-bar/volume-panel.js"],"names":["define","document","Component","obj","Events","Fn","keycode","VolumePanel","[object Object]","player","options","inline","volumeControl","isPlain","vertical","super","this","listenTo","volumePanelState_","muteToggle","handleKeyPress","handleVolumeControlKeyUp","handleMouseOver","handleMouseOut","sliderActive_","sliderInactive_","addClass","removeClass","hasClass","orientationClass","options_","createEl","className","dispose","event","isEventKey","focus","on","bind","off","prototype","children","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,iCACA,eACA,eACA,kBACA,cACA,mBACA,kCACA,iBACD,SAAUC,EAAUC,EAAWC,EAAKC,EAAQC,EAAIC,GAC/C,mBACMC,UAAoBL,EACtBM,YAAYC,EAAQC,WACc,IAAnBA,EAAQC,OACfD,EAAQC,OAASD,EAAQC,OAEzBD,EAAQC,QAAS,QAEgB,IAA1BD,EAAQE,eAAiCT,EAAIU,QAAQH,EAAQE,kBACpEF,EAAQE,cAAgBF,EAAQE,kBAChCF,EAAQE,cAAcE,UAAYJ,EAAQC,QAE9CI,MAAMN,EAAQC,GACdM,KAAKC,SAASR,GAAS,aAAcO,KAAKE,mBAC1CF,KAAKC,SAASD,KAAKG,WAAY,QAASH,KAAKI,gBAC7CJ,KAAKC,SAASD,KAAKJ,cAAe,QAASI,KAAKK,0BAChDL,KAAKC,SAAS,UAAWD,KAAKI,gBAC9BJ,KAAKC,SAAS,YAAaD,KAAKM,iBAChCN,KAAKC,SAAS,WAAYD,KAAKO,gBAC/BP,KAAKC,SAASD,KAAKJ,eAAgB,gBAAiBI,KAAKQ,eACzDR,KAAKC,SAASD,KAAKJ,eAAgB,kBAAmBI,KAAKS,iBAE/DjB,gBACIQ,KAAKU,SAAS,qBAElBlB,kBACIQ,KAAKW,YAAY,qBAErBnB,oBACQQ,KAAKJ,cAAcgB,SAAS,eAAiBZ,KAAKG,WAAWS,SAAS,eACtEZ,KAAKU,SAAS,cAEdV,KAAKJ,cAAcgB,SAAS,gBAAkBZ,KAAKG,WAAWS,SAAS,eACvEZ,KAAKU,SAAS,wBAGtBlB,WACI,IAAIqB,EAAmB,8BAIvB,OAHKb,KAAKc,SAASnB,SACfkB,EAAmB,6BAEhBd,MAAMgB,SAAS,OAASC,0CAA4CH,MAE/ErB,UACIQ,KAAKO,iBACLR,MAAMkB,UAEVzB,yBAAyB0B,GACjB5B,EAAQ6B,WAAWD,EAAO,QAC1BlB,KAAKG,WAAWiB,QAGxB5B,gBAAgB0B,GACZlB,KAAKU,SAAS,aACdtB,EAAOiC,GAAGpC,EAAU,QAASI,EAAGiC,KAAKtB,KAAMA,KAAKI,iBAEpDZ,eAAe0B,GACXlB,KAAKW,YAAY,aACjBvB,EAAOmC,IAAItC,EAAU,QAASI,EAAGiC,KAAKtB,KAAMA,KAAKI,iBAErDZ,eAAe0B,GACP5B,EAAQ6B,WAAWD,EAAO,QAC1BlB,KAAKO,kBAWjB,OAPAhB,EAAYiC,UAAUV,UAClBW,UACI,aACA,kBAGRvC,EAAUwC,kBAAkB,cAAenC,GACpCA","file":"../../control-bar/volume-panel.js","sourcesContent":["define([\n    'skylark-langx-globals/document',\n    '../component',\n    '../utils/obj',\n    '../utils/events',\n    '../utils/fn',\n    '../utils/keycode',\n    './volume-control/volume-control',\n    './mute-toggle'\n], function (document, Component, obj, Events, Fn, keycode) {\n    'use strict';\n    class VolumePanel extends Component {\n        constructor(player, options = {}) {\n            if (typeof options.inline !== 'undefined') {\n                options.inline = options.inline;\n            } else {\n                options.inline = true;\n            }\n            if (typeof options.volumeControl === 'undefined' || obj.isPlain(options.volumeControl)) {\n                options.volumeControl = options.volumeControl || {};\n                options.volumeControl.vertical = !options.inline;\n            }\n            super(player, options);\n            this.listenTo(player, ['loadstart'], this.volumePanelState_);\n            this.listenTo(this.muteToggle, 'keyup', this.handleKeyPress);\n            this.listenTo(this.volumeControl, 'keyup', this.handleVolumeControlKeyUp);\n            this.listenTo('keydown', this.handleKeyPress);\n            this.listenTo('mouseover', this.handleMouseOver);\n            this.listenTo('mouseout', this.handleMouseOut);\n            this.listenTo(this.volumeControl, ['slideractive'], this.sliderActive_);\n            this.listenTo(this.volumeControl, ['sliderinactive'], this.sliderInactive_);\n        }\n        sliderActive_() {\n            this.addClass('vjs-slider-active');\n        }\n        sliderInactive_() {\n            this.removeClass('vjs-slider-active');\n        }\n        volumePanelState_() {\n            if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {\n                this.addClass('vjs-hidden');\n            }\n            if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {\n                this.addClass('vjs-mute-toggle-only');\n            }\n        }\n        createEl() {\n            let orientationClass = 'vjs-volume-panel-horizontal';\n            if (!this.options_.inline) {\n                orientationClass = 'vjs-volume-panel-vertical';\n            }\n            return super.createEl('div', { className: `vjs-volume-panel vjs-control ${ orientationClass }` });\n        }\n        dispose() {\n            this.handleMouseOut();\n            super.dispose();\n        }\n        handleVolumeControlKeyUp(event) {\n            if (keycode.isEventKey(event, 'Esc')) {\n                this.muteToggle.focus();\n            }\n        }\n        handleMouseOver(event) {\n            this.addClass('vjs-hover');\n            Events.on(document, 'keyup', Fn.bind(this, this.handleKeyPress));\n        }\n        handleMouseOut(event) {\n            this.removeClass('vjs-hover');\n            Events.off(document, 'keyup', Fn.bind(this, this.handleKeyPress));\n        }\n        handleKeyPress(event) {\n            if (keycode.isEventKey(event, 'Esc')) {\n                this.handleMouseOut();\n            }\n        }\n    }\n    VolumePanel.prototype.options_ = {\n        children: [\n            'muteToggle',\n            'volumeControl'\n        ]\n    };\n    Component.registerComponent('VolumePanel', VolumePanel);\n    return VolumePanel;\n});"]}