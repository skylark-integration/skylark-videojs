{"version":3,"sources":["control-bar/time-controls/time-display.js"],"names":["define","document","Component","Dom","formatTime","log","TimeDisplay","[object Object]","player","options","super","this","listenTo","updateContent","updateTextNode_","className","buildCSSClass","el","createEl","innerHTML","localize","labelText_","contentEl_","aria-live","role","appendChild","textNode_","dispose","time","formattedTime_","requestNamedAnimationFrame","oldNode","firstChild","warn","createTextNode","replaceChild","event","prototype","controlText_","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,iCACA,kBACA,kBACA,0BACA,mBACD,SAAUC,EAAUC,EAAWC,EAAKC,EAAYC,GAC/C,mBACMC,UAAoBJ,EACtBK,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdE,KAAKC,SAASJ,GACV,aACA,SACDG,KAAKE,eACRF,KAAKG,kBAETP,WACI,MAAMQ,EAAYJ,KAAKK,gBACjBC,EAAKP,MAAMQ,SAAS,OACtBH,aAAeA,iCACfI,gEAAkER,KAAKS,SAAST,KAAKU,wBAOzF,OALAV,KAAKW,WAAanB,EAAIe,SAAS,QAAUH,aAAeA,cACpDQ,YAAa,MACbC,KAAQ,iBAEZP,EAAGQ,YAAYd,KAAKW,YACbL,EAEXV,UACII,KAAKW,WAAa,KAClBX,KAAKe,UAAY,KACjBhB,MAAMiB,UAEVpB,gBAAgBqB,EAAO,GACnBA,EAAOxB,EAAWwB,GACdjB,KAAKkB,iBAAmBD,IAG5BjB,KAAKkB,eAAiBD,EACtBjB,KAAKmB,2BAA2B,8BAA+B,KAC3D,IAAKnB,KAAKW,WACN,OAEJ,IAAIS,EAAUpB,KAAKe,UACfK,GAAWpB,KAAKW,WAAWU,aAAeD,IAC1CA,EAAU,KACV1B,EAAI4B,KAAK,uJAEbtB,KAAKe,UAAYzB,EAASiC,eAAevB,KAAKkB,gBACzClB,KAAKe,YAGNK,EACApB,KAAKW,WAAWa,aAAaxB,KAAKe,UAAWK,GAE7CpB,KAAKW,WAAWG,YAAYd,KAAKe,eAI7CnB,cAAc6B,KAMlB,OAHA9B,EAAY+B,UAAUhB,WAAa,OACnCf,EAAY+B,UAAUC,aAAe,OACrCpC,EAAUqC,kBAAkB,cAAejC,GACpCA","file":"../../../control-bar/time-controls/time-display.js","sourcesContent":["define([\n    'skylark-langx-globals/document',\n    '../../component',\n    '../../utils/dom',\n    '../../utils/format-time',\n    '../../utils/log'\n], function (document, Component, Dom, formatTime, log) {\n    'use strict';\n    class TimeDisplay extends Component {\n        constructor(player, options) {\n            super(player, options);\n            this.listenTo(player, [\n                'timeupdate',\n                'ended'\n            ], this.updateContent);\n            this.updateTextNode_();\n        }\n        createEl() {\n            const className = this.buildCSSClass();\n            const el = super.createEl('div', {\n                className: `${ className } vjs-time-control vjs-control`,\n                innerHTML: `<span class=\"vjs-control-text\" role=\"presentation\">${ this.localize(this.labelText_) }\\u00a0</span>`\n            });\n            this.contentEl_ = Dom.createEl('span', { className: `${ className }-display` }, {\n                'aria-live': 'off',\n                'role': 'presentation'\n            });\n            el.appendChild(this.contentEl_);\n            return el;\n        }\n        dispose() {\n            this.contentEl_ = null;\n            this.textNode_ = null;\n            super.dispose();\n        }\n        updateTextNode_(time = 0) {\n            time = formatTime(time);\n            if (this.formattedTime_ === time) {\n                return;\n            }\n            this.formattedTime_ = time;\n            this.requestNamedAnimationFrame('TimeDisplay#updateTextNode_', () => {\n                if (!this.contentEl_) {\n                    return;\n                }\n                let oldNode = this.textNode_;\n                if (oldNode && this.contentEl_.firstChild !== oldNode) {\n                    oldNode = null;\n                    log.warn('TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.');\n                }\n                this.textNode_ = document.createTextNode(this.formattedTime_);\n                if (!this.textNode_) {\n                    return;\n                }\n                if (oldNode) {\n                    this.contentEl_.replaceChild(this.textNode_, oldNode);\n                } else {\n                    this.contentEl_.appendChild(this.textNode_);\n                }\n            });\n        }\n        updateContent(event) {\n        }\n    }\n    TimeDisplay.prototype.labelText_ = 'Time';\n    TimeDisplay.prototype.controlText_ = 'Time';\n    Component.registerComponent('TimeDisplay', TimeDisplay);\n    return TimeDisplay;\n});"]}