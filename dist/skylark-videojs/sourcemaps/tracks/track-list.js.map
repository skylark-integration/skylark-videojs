{"version":3,"sources":["tracks/track-list.js"],"names":["define","EventTarget","evented","TrackList","[object Object]","tracks","super","this","tracks_","Object","defineProperty","length","i","addTrack","track","index","indexOf","push","trigger","type","target","labelchange_","isEvented","addEventListener","rtrack","l","off","splice","id","result","prototype","allowedEvents_","change","addtrack","removetrack","labelchange","event"],"mappings":";;;;;;;AAAAA,QACI,kBACA,qBACD,SAAUC,EAAaC,GACtB,mBACMC,UAAkBF,EACpBG,YAAYC,MACRC,QACAC,KAAKC,WACLC,OAAOC,eAAeH,KAAM,UACxBH,MACI,OAAOG,KAAKC,QAAQG,UAG5B,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOM,OAAQC,IAC/BL,KAAKM,SAASR,EAAOO,IAG7BR,SAASU,GACL,MAAMC,EAAQR,KAAKC,QAAQG,OACrB,GAAKI,KAASR,MAChBE,OAAOC,eAAeH,KAAMQ,GACxBX,MACI,OAAOG,KAAKC,QAAQO,OAIK,IAAjCR,KAAKC,QAAQQ,QAAQF,KACrBP,KAAKC,QAAQS,KAAKH,GAClBP,KAAKW,SACDJ,MAAAA,EACAK,KAAM,WACNC,OAAQb,QAGhBO,EAAMO,aAAe,MACjBd,KAAKW,SACDJ,MAAAA,EACAK,KAAM,cACNC,OAAQb,SAGZL,EAAQoB,UAAUR,IAClBA,EAAMS,iBAAiB,cAAeT,EAAMO,cAGpDjB,YAAYoB,GACR,IAAIV,EACJ,IAAK,IAAIF,EAAI,EAAGa,EAAIlB,KAAKI,OAAQC,EAAIa,EAAGb,IACpC,GAAIL,KAAKK,KAAOY,EAAQ,EACpBV,EAAQP,KAAKK,IACHc,KACNZ,EAAMY,MAEVnB,KAAKC,QAAQmB,OAAOf,EAAG,GACvB,MAGHE,GAGLP,KAAKW,SACDJ,MAAAA,EACAK,KAAM,cACNC,OAAQb,OAGhBH,aAAawB,GACT,IAAIC,EAAS,KACb,IAAK,IAAIjB,EAAI,EAAGa,EAAIlB,KAAKI,OAAQC,EAAIa,EAAGb,IAAK,CACzC,MAAME,EAAQP,KAAKK,GACnB,GAAIE,EAAMc,KAAOA,EAAI,CACjBC,EAASf,EACT,OAGR,OAAOe,GAGf1B,EAAU2B,UAAUC,gBAChBC,OAAQ,SACRC,SAAU,WACVC,YAAa,cACbC,YAAa,eAEjB,IAAK,MAAMC,KAASjC,EAAU2B,UAAUC,eACpC5B,EAAU2B,UAAU,KAAOM,GAAS,KAExC,OAAOjC","file":"../../tracks/track-list.js","sourcesContent":["define([\n    '../event-target',\n    '../mixins/evented'\n], function (EventTarget, evented) {\n    'use strict';\n    class TrackList extends EventTarget {\n        constructor(tracks = []) {\n            super();\n            this.tracks_ = [];\n            Object.defineProperty(this, 'length', {\n                get() {\n                    return this.tracks_.length;\n                }\n            });\n            for (let i = 0; i < tracks.length; i++) {\n                this.addTrack(tracks[i]);\n            }\n        }\n        addTrack(track) {\n            const index = this.tracks_.length;\n            if (!('' + index in this)) {\n                Object.defineProperty(this, index, {\n                    get() {\n                        return this.tracks_[index];\n                    }\n                });\n            }\n            if (this.tracks_.indexOf(track) === -1) {\n                this.tracks_.push(track);\n                this.trigger({\n                    track,\n                    type: 'addtrack',\n                    target: this\n                });\n            }\n            track.labelchange_ = () => {\n                this.trigger({\n                    track,\n                    type: 'labelchange',\n                    target: this\n                });\n            };\n            if (evented.isEvented(track)) {\n                track.addEventListener('labelchange', track.labelchange_);\n            }\n        }\n        removeTrack(rtrack) {\n            let track;\n            for (let i = 0, l = this.length; i < l; i++) {\n                if (this[i] === rtrack) {\n                    track = this[i];\n                    if (track.off) {\n                        track.off();\n                    }\n                    this.tracks_.splice(i, 1);\n                    break;\n                }\n            }\n            if (!track) {\n                return;\n            }\n            this.trigger({\n                track,\n                type: 'removetrack',\n                target: this\n            });\n        }\n        getTrackById(id) {\n            let result = null;\n            for (let i = 0, l = this.length; i < l; i++) {\n                const track = this[i];\n                if (track.id === id) {\n                    result = track;\n                    break;\n                }\n            }\n            return result;\n        }\n    }\n    TrackList.prototype.allowedEvents_ = {\n        change: 'change',\n        addtrack: 'addtrack',\n        removetrack: 'removetrack',\n        labelchange: 'labelchange'\n    };\n    for (const event in TrackList.prototype.allowedEvents_) {\n        TrackList.prototype['on' + event] = null;\n    }\n    return TrackList;\n});"]}