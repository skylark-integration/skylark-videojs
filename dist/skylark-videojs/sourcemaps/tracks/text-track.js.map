{"version":3,"sources":["tracks/text-track.js"],"names":["define","vtt","TextTrackCueList","Fn","TrackEnums","log","Track","url","XHR","merge","parseCues","srcContent","track","parser","WebVTT","Parser","window","StringDecoder","errors","oncue","cue","addCue","onparsingerror","error","push","onflush","trigger","type","target","parse","length","console","groupCollapsed","src","forEach","groupEnd","flush","loadTrack","opts","uri","crossOrigin","isCrossOrigin","cors","withCredentials","tech_","bind","this","err","response","responseBody","loaded_","any","event","TextTrack","[object Object]","options","tech","Error","settings","kind","TextTrackKind","language","srclang","mode","TextTrackMode","default_","default","super","cues_","activeCues_","preload_","preloadTextTracks","cues","activeCues","changed","timeupdateHandler","isReady_","isDisposed","one","off","on","Object","defineProperties","get","newMode","ct","currentTime","active","i","l","startTime","endTime","indexOf","setCues_","originalCue","VTTCue","text","prop","id","originalCue_","tracks","textTracks","removeCue","splice","prototype","allowedEvents_","cuechange"],"mappings":"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","file":"../../tracks/text-track.js","sourcesContent":["define([\n    'skylark-videojs-vtt',\n    './text-track-cue-list',\n    '../utils/fn',\n    './track-enums',\n    '../utils/log',\n    './track',\n    '../utils/url',\n    '../utils/xhr',\n    '../utils/merge-options'\n], function (vtt,TextTrackCueList, Fn, TrackEnums, log, Track, url, XHR, merge) {\n    'use strict';\n    const parseCues = function (srcContent, track) {\n        const parser = new vtt.WebVTT.Parser(window, vtt, vtt.WebVTT.StringDecoder());\n        const errors = [];\n        parser.oncue = function (cue) {\n            track.addCue(cue);\n        };\n        parser.onparsingerror = function (error) {\n            errors.push(error);\n        };\n        parser.onflush = function () {\n            track.trigger({\n                type: 'loadeddata',\n                target: track\n            });\n        };\n        parser.parse(srcContent);\n        if (errors.length > 0) {\n            if (window.console && window.console.groupCollapsed) {\n                window.console.groupCollapsed(`Text Track parsing errors for ${ track.src }`);\n            }\n            errors.forEach(error => log.error(error));\n            if (window.console && window.console.groupEnd) {\n                window.console.groupEnd();\n            }\n        }\n        parser.flush();\n    };\n    const loadTrack = function (src, track) {\n        const opts = { uri: src };\n        const crossOrigin = url.isCrossOrigin(src);\n        if (crossOrigin) {\n            opts.cors = crossOrigin;\n        }\n        const withCredentials = track.tech_.crossOrigin() === 'use-credentials';\n        if (withCredentials) {\n            opts.withCredentials = withCredentials;\n        }\n        XHR(opts, Fn.bind(this, function (err, response, responseBody) {\n            if (err) {\n                return log.error(err, response);\n            }\n            track.loaded_ = true;\n            if (typeof vtt.WebVTT !== 'function') {\n                if (track.tech_) {\n                    track.tech_.any([\n                        'vttjsloaded',\n                        'vttjserror'\n                    ], event => {\n                        if (event.type === 'vttjserror') {\n                            log.error(`vttjs failed to load, stopping trying to process ${ track.src }`);\n                            return;\n                        }\n                        return parseCues(responseBody, track);\n                    });\n                }\n            } else {\n                parseCues(responseBody, track);\n            }\n        }));\n    };\n    class TextTrack extends Track {\n        constructor(options = {}) {\n            if (!options.tech) {\n                throw new Error('A tech was not provided.');\n            }\n            const settings = merge(options, {\n                kind: TrackEnums.TextTrackKind[options.kind] || 'subtitles',\n                language: options.language || options.srclang || ''\n            });\n            let mode = TrackEnums.TextTrackMode[settings.mode] || 'disabled';\n            const default_ = settings.default;\n            if (settings.kind === 'metadata' || settings.kind === 'chapters') {\n                mode = 'hidden';\n            }\n            super(settings);\n            this.tech_ = settings.tech;\n            this.cues_ = [];\n            this.activeCues_ = [];\n            this.preload_ = this.tech_.preloadTextTracks !== false;\n            const cues = new TextTrackCueList(this.cues_);\n            const activeCues = new TextTrackCueList(this.activeCues_);\n            let changed = false;\n            const timeupdateHandler = Fn.bind(this, function () {\n                if (!this.tech_.isReady_ || this.tech_.isDisposed()) {\n                    return;\n                }\n                this.activeCues = this.activeCues;\n                if (changed) {\n                    this.trigger('cuechange');\n                    changed = false;\n                }\n            });\n            const disposeHandler = () => {\n                this.tech_.off('timeupdate', timeupdateHandler);\n            };\n            this.tech_.one('dispose', disposeHandler);\n            if (mode !== 'disabled') {\n                this.tech_.on('timeupdate', timeupdateHandler);\n            }\n            Object.defineProperties(this, {\n                default: {\n                    get() {\n                        return default_;\n                    },\n                    set() {\n                    }\n                },\n                mode: {\n                    get() {\n                        return mode;\n                    },\n                    set(newMode) {\n                        if (!TrackEnums.TextTrackMode[newMode]) {\n                            return;\n                        }\n                        if (mode === newMode) {\n                            return;\n                        }\n                        mode = newMode;\n                        if (!this.preload_ && mode !== 'disabled' && this.cues.length === 0) {\n                            loadTrack(this.src, this);\n                        }\n                        this.tech_.off('timeupdate', timeupdateHandler);\n                        if (mode !== 'disabled') {\n                            this.tech_.on('timeupdate', timeupdateHandler);\n                        }\n                        this.trigger('modechange');\n                    }\n                },\n                cues: {\n                    get() {\n                        if (!this.loaded_) {\n                            return null;\n                        }\n                        return cues;\n                    },\n                    set() {\n                    }\n                },\n                activeCues: {\n                    get() {\n                        if (!this.loaded_) {\n                            return null;\n                        }\n                        if (this.cues.length === 0) {\n                            return activeCues;\n                        }\n                        const ct = this.tech_.currentTime();\n                        const active = [];\n                        for (let i = 0, l = this.cues.length; i < l; i++) {\n                            const cue = this.cues[i];\n                            if (cue.startTime <= ct && cue.endTime >= ct) {\n                                active.push(cue);\n                            } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {\n                                active.push(cue);\n                            }\n                        }\n                        changed = false;\n                        if (active.length !== this.activeCues_.length) {\n                            changed = true;\n                        } else {\n                            for (let i = 0; i < active.length; i++) {\n                                if (this.activeCues_.indexOf(active[i]) === -1) {\n                                    changed = true;\n                                }\n                            }\n                        }\n                        this.activeCues_ = active;\n                        activeCues.setCues_(this.activeCues_);\n                        return activeCues;\n                    },\n                    set() {\n                    }\n                }\n            });\n            if (settings.src) {\n                this.src = settings.src;\n                if (!this.preload_) {\n                    this.loaded_ = true;\n                }\n                if (this.preload_ || default_ || settings.kind !== 'subtitles' && settings.kind !== 'captions') {\n                    loadTrack(this.src, this);\n                }\n            } else {\n                this.loaded_ = true;\n            }\n        }\n        addCue(originalCue) {\n            let cue = originalCue;\n            if (vtt && !(originalCue instanceof vtt.VTTCue)) {\n                cue = new vtt.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);\n                for (const prop in originalCue) {\n                    if (!(prop in cue)) {\n                        cue[prop] = originalCue[prop];\n                    }\n                }\n                cue.id = originalCue.id;\n                cue.originalCue_ = originalCue;\n            }\n            const tracks = this.tech_.textTracks();\n            for (let i = 0; i < tracks.length; i++) {\n                if (tracks[i] !== this) {\n                    tracks[i].removeCue(cue);\n                }\n            }\n            this.cues_.push(cue);\n            this.cues.setCues_(this.cues_);\n        }\n        removeCue(removeCue) {\n            let i = this.cues_.length;\n            while (i--) {\n                const cue = this.cues_[i];\n                if (cue === removeCue || cue.originalCue_ && cue.originalCue_ === removeCue) {\n                    this.cues_.splice(i, 1);\n                    this.cues.setCues_(this.cues_);\n                    break;\n                }\n            }\n        }\n    }\n    TextTrack.prototype.allowedEvents_ = { cuechange: 'cuechange' };\n    return TextTrack;\n});"]}