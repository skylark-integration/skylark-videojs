{"version":3,"sources":["tracks/text-track-list-converter.js"],"names":["define","trackToJson_","track","reduce","acc","prop","i","cues","Array","prototype","map","call","cue","startTime","endTime","text","id","textTracksToJson","tech","trackEls","$$","trackObjs","t","trackEl","json","src","concat","filter","textTracks","indexOf","jsonToTextTracks","forEach","addedTrack","addRemoteTextTrack","addCue"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aACA,MAAMC,EAAe,SAAUC,GAwB3B,OAtBI,OACA,QACA,WACA,KACA,kCACA,OACA,OACFC,OAAO,CAACC,EAAKC,EAAMC,KACbJ,EAAMG,KACND,EAAIC,GAAQH,EAAMG,IAEfD,IAEPG,KAAML,EAAMK,MAAQC,MAAMC,UAAUC,IAAIC,KAAKT,EAAMK,KAAM,SAAUK,GAC/D,OACIC,UAAWD,EAAIC,UACfC,QAASF,EAAIE,QACbC,KAAMH,EAAIG,KACVC,GAAIJ,EAAII,SA6BxB,OACIC,iBAxBqB,SAAUC,GAC/B,MAAMC,EAAWD,EAAKE,GAAG,SACnBC,EAAYb,MAAMC,UAAUC,IAAIC,KAAKQ,EAAUG,GAAKA,EAAEpB,OAQ5D,OAPeM,MAAMC,UAAUC,IAAIC,KAAKQ,EAAU,SAAUI,GACxD,MAAMC,EAAOvB,EAAasB,EAAQrB,OAIlC,OAHIqB,EAAQE,MACRD,EAAKC,IAAMF,EAAQE,KAEhBD,IAEGE,OAAOlB,MAAMC,UAAUkB,OAAOhB,KAAKO,EAAKU,aAAc,SAAU1B,GAC1E,OAAqC,IAA9BmB,EAAUQ,QAAQ3B,KAC1BQ,IAAIT,KAaP6B,iBAXqB,SAAUN,EAAMN,GAOrC,OANAM,EAAKO,QAAQ,SAAU7B,GACnB,MAAM8B,EAAad,EAAKe,mBAAmB/B,GAAOA,OAC7CA,EAAMuB,KAAOvB,EAAMK,MACpBL,EAAMK,KAAKwB,QAAQnB,GAAOoB,EAAWE,OAAOtB,MAG7CM,EAAKU,cAKZ3B,aAAAA","file":"../../tracks/text-track-list-converter.js","sourcesContent":["define(function () {\n    'use strict';\n    const trackToJson_ = function (track) {\n        const ret = [\n            'kind',\n            'label',\n            'language',\n            'id',\n            'inBandMetadataTrackDispatchType',\n            'mode',\n            'src'\n        ].reduce((acc, prop, i) => {\n            if (track[prop]) {\n                acc[prop] = track[prop];\n            }\n            return acc;\n        }, {\n            cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {\n                return {\n                    startTime: cue.startTime,\n                    endTime: cue.endTime,\n                    text: cue.text,\n                    id: cue.id\n                };\n            })\n        });\n        return ret;\n    };\n    const textTracksToJson = function (tech) {\n        const trackEls = tech.$$('track');\n        const trackObjs = Array.prototype.map.call(trackEls, t => t.track);\n        const tracks = Array.prototype.map.call(trackEls, function (trackEl) {\n            const json = trackToJson_(trackEl.track);\n            if (trackEl.src) {\n                json.src = trackEl.src;\n            }\n            return json;\n        });\n        return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {\n            return trackObjs.indexOf(track) === -1;\n        }).map(trackToJson_));\n    };\n    const jsonToTextTracks = function (json, tech) {\n        json.forEach(function (track) {\n            const addedTrack = tech.addRemoteTextTrack(track).track;\n            if (!track.src && track.cues) {\n                track.cues.forEach(cue => addedTrack.addCue(cue));\n            }\n        });\n        return tech.textTracks();\n    };\n    return {\n        textTracksToJson,\n        jsonToTextTracks,\n        trackToJson_\n    };\n});"]}