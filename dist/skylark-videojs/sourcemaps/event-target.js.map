{"version":3,"sources":["event-target.js"],"names":["define","Emitter","Events","EventTarget","inherit","EVENT_MAP","prototype","addEventListener","on","dispatchEvent","trigger","removeEventListener","off","any","one","queueTrigger","event","Map","type","map","get","this","set","oldTimeout","delete","window","clearTimeout","timeout","setTimeout","size"],"mappings":";;;;;;;AAAAA,QACI,+BACA,kBACD,SAAUC,EAAQC,GACjB,aA+CA,IAAIC,EAAcF,EAAQG,YAM1B,IAAIC,EAwBJ,OA7BAF,EAAYG,UAAUC,iBAAmBJ,EAAYG,UAAUE,GAC/DL,EAAYG,UAAUG,cAAgBN,EAAYG,UAAUI,QAC5DP,EAAYG,UAAUK,oBAAsBR,EAAYG,UAAUM,IAClET,EAAYG,UAAUO,IAAMV,EAAYG,UAAUQ,IAGlDX,EAAYG,UAAUS,aAAe,SAAUC,GACtCX,IACDA,EAAY,IAAIY,KAEpB,MAAMC,EAAOF,EAAME,MAAQF,EAC3B,IAAIG,EAAMd,EAAUe,IAAIC,MACnBF,IACDA,EAAM,IAAIF,IACVZ,EAAUiB,IAAID,KAAMF,IAExB,MAAMI,EAAaJ,EAAIC,IAAIF,GAC3BC,EAAIK,OAAON,GACXO,OAAOC,aAAaH,GACpB,MAAMI,EAAUF,OAAOG,WAAW,KACb,IAAbT,EAAIU,OACJV,EAAM,KACNd,EAAUmB,OAAOH,OAErBA,KAAKX,QAAQM,IACd,GACHG,EAAIG,IAAIJ,EAAMS,IAGXxB","file":"../event-target.js","sourcesContent":["define([\n    \"skylark-langx-events/Emitter\",\n    './utils/events'\n], function (Emitter,Events) {\n    'use strict';\n\n    /*\n    const EventTarget = function () {\n    };\n    EventTarget.prototype.allowedEvents_ = {};\n    EventTarget.prototype.on = function (type, fn) {\n        const ael = this.addEventListener;\n        this.addEventListener = () => {\n        };\n        Events.on(this, type, fn);\n        this.addEventListener = ael;\n    };\n    EventTarget.prototype.addEventListener = EventTarget.prototype.on;\n    EventTarget.prototype.off = function (type, fn) {\n        Events.off(this, type, fn);\n    };\n    EventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n    EventTarget.prototype.one = function (type, fn) {\n        const ael = this.addEventListener;\n        this.addEventListener = () => {\n        };\n        Events.one(this, type, fn);\n        this.addEventListener = ael;\n    };\n    EventTarget.prototype.any = function (type, fn) {\n        const ael = this.addEventListener;\n        this.addEventListener = () => {\n        };\n        Events.any(this, type, fn);\n        this.addEventListener = ael;\n    };\n    EventTarget.prototype.trigger = function (event) {\n        const type = event.type || event;\n        if (typeof event === 'string') {\n            event = { type };\n        }\n        event = Events.fixEvent(event);\n        if (this.allowedEvents_[type] && this['on' + type]) {\n            this['on' + type](event);\n        }\n        Events.trigger(this, event);\n    };\n    EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\n\n    */\n\n    var EventTarget = Emitter.inherit({});\n    EventTarget.prototype.addEventListener = EventTarget.prototype.on;\n    EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;\n    EventTarget.prototype.removeEventListener = EventTarget.prototype.off;\n    EventTarget.prototype.any = EventTarget.prototype.one;\n\n    let EVENT_MAP;\n    EventTarget.prototype.queueTrigger = function (event) {\n        if (!EVENT_MAP) {\n            EVENT_MAP = new Map();\n        }\n        const type = event.type || event;\n        let map = EVENT_MAP.get(this);\n        if (!map) {\n            map = new Map();\n            EVENT_MAP.set(this, map);\n        }\n        const oldTimeout = map.get(type);\n        map.delete(type);\n        window.clearTimeout(oldTimeout);\n        const timeout = window.setTimeout(() => {\n            if (map.size === 0) {\n                map = null;\n                EVENT_MAP.delete(this);\n            }\n            this.trigger(event);\n        }, 0);\n        map.set(type, timeout);\n    };\n\n    return EventTarget;\n});"]}