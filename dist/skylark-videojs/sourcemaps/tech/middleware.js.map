{"version":3,"sources":["tech/middleware.js"],"names":["define","obj","stringCases","middlewares","middlewareInstances","TERMINATOR","middlewareIterator","method","value","mw","use","type","middleware","push","getMiddleware","setSource","player","src","next","setTimeout","setSourceHelper","acc","lastRun","mwFactory","mwrest","mws","id","undefined","i","length","mwf","mwi","getOrCreateFactory","assign","err","_src","setTech","tech","forEach","get","reduceRight","set","arg","reduce","mediate","callMethod","toTitleCase","middlewareValue","terminated","returnValue","executeRight","allowedGetters","buffered","currentTime","duration","muted","played","paused","seekable","volume","allowedSetters","setCurrentTime","setMuted","setVolume","allowedMediators","play","pause","clearCacheForPlayer"],"mappings":"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","file":"../../tech/middleware.js","sourcesContent":["define([\n    '../utils/obj',\n    '../utils/string-cases'\n], function (obj, stringCases) {\n    'use strict';\n    const middlewares = {};\n    const middlewareInstances = {};\n    const TERMINATOR = {};\n    function use(type, middleware) {\n        middlewares[type] = middlewares[type] || [];\n        middlewares[type].push(middleware);\n    }\n    function getMiddleware(type) {\n        if (type) {\n            return middlewares[type];\n        }\n        return middlewares;\n    }\n    function setSource(player, src, next) {\n        player.setTimeout(() => setSourceHelper(src, middlewares[src.type], next, player), 1);\n    }\n    function setTech(middleware, tech) {\n        middleware.forEach(mw => mw.setTech && mw.setTech(tech));\n    }\n    function get(middleware, tech, method) {\n        return middleware.reduceRight(middlewareIterator(method), tech[method]());\n    }\n    function set(middleware, tech, method, arg) {\n        return tech[method](middleware.reduce(middlewareIterator(method), arg));\n    }\n    function mediate(middleware, tech, method, arg = null) {\n        const callMethod = 'call' + stringCases.toTitleCase(method);\n        const middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);\n        const terminated = middlewareValue === TERMINATOR;\n        const returnValue = terminated ? null : tech[method](middlewareValue);\n        executeRight(middleware, method, returnValue, terminated);\n        return returnValue;\n    }\n    const allowedGetters = {\n        buffered: 1,\n        currentTime: 1,\n        duration: 1,\n        muted: 1,\n        played: 1,\n        paused: 1,\n        seekable: 1,\n        volume: 1\n    };\n    const allowedSetters = {\n        setCurrentTime: 1,\n        setMuted: 1,\n        setVolume: 1\n    };\n    const allowedMediators = {\n        play: 1,\n        pause: 1\n    };\n    function middlewareIterator(method) {\n        return (value, mw) => {\n            if (value === TERMINATOR) {\n                return TERMINATOR;\n            }\n            if (mw[method]) {\n                return mw[method](value);\n            }\n            return value;\n        };\n    }\n    function executeRight(mws, method, value, terminated) {\n        for (let i = mws.length - 1; i >= 0; i--) {\n            const mw = mws[i];\n            if (mw[method]) {\n                mw[method](terminated, value);\n            }\n        }\n    }\n    function clearCacheForPlayer(player) {\n        middlewareInstances[player.id()] = null;\n    }\n    function getOrCreateFactory(player, mwFactory) {\n        const mws = middlewareInstances[player.id()];\n        let mw = null;\n        if (mws === undefined || mws === null) {\n            mw = mwFactory(player);\n            middlewareInstances[player.id()] = [[\n                    mwFactory,\n                    mw\n                ]];\n            return mw;\n        }\n        for (let i = 0; i < mws.length; i++) {\n            const [mwf, mwi] = mws[i];\n            if (mwf !== mwFactory) {\n                continue;\n            }\n            mw = mwi;\n        }\n        if (mw === null) {\n            mw = mwFactory(player);\n            mws.push([\n                mwFactory,\n                mw\n            ]);\n        }\n        return mw;\n    }\n    function setSourceHelper(src = {}, middleware = [], next, player, acc = [], lastRun = false) {\n        const [mwFactory, ...mwrest] = middleware;\n        if (typeof mwFactory === 'string') {\n            setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);\n        } else if (mwFactory) {\n            const mw = getOrCreateFactory(player, mwFactory);\n            if (!mw.setSource) {\n                acc.push(mw);\n                return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n            }\n            mw.setSource(obj.assign({}, src), function (err, _src) {\n                if (err) {\n                    return setSourceHelper(src, mwrest, next, player, acc, lastRun);\n                }\n                acc.push(mw);\n                setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);\n            });\n        } else if (mwrest.length) {\n            setSourceHelper(src, mwrest, next, player, acc, lastRun);\n        } else if (lastRun) {\n            next(src, acc);\n        } else {\n            setSourceHelper(src, middlewares['*'], next, player, acc, true);\n        }\n    }\n    return {\n        TERMINATOR: TERMINATOR,\n        use: use,\n        getMiddleware: getMiddleware,\n        setSource: setSource,\n        setTech: setTech,\n        get: get,\n        set: set,\n        mediate: mediate,\n        allowedGetters: allowedGetters,\n        allowedSetters: allowedSetters,\n        allowedMediators: allowedMediators,\n        clearCacheForPlayer: clearCacheForPlayer\n    };\n});"]}