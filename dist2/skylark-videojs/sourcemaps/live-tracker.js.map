{"version":3,"sources":["live-tracker.js"],"names":["define","Component","mergeOptions","browser","Fn","defaults","trackingThreshold","liveTolerance","LiveTracker","[object Object]","player","options","super","createEl","this","reset_","on","player_","handleDurationchange","IE_VERSION","document","handleVisibilityChange","duration","Infinity","hidden","stopTracking","startTracking","seekable","length","newTime","Number","window","performance","now","toFixed","deltaTime","lastTime_","pastSeekEnd_","pastSeekEnd","liveCurrentTime","currentTime","isBehind","paused","seekedBehindLive_","Math","abs","options_","timeupdateSeen_","behindLiveEdge_","trigger","liveWindow","liveui","addClass","removeClass","isTracking","hasStarted","trackingInterval_","setInterval","trackLive_","UPDATE_REFRESH_INTERVAL","handleSeeked","one","handlePlay","handleFirstTimeupdate","timeDiff","skipNextSeeked_","seekToLiveEdge","lastSeekEnd_","clearInterval","off","seekableEnds","i","push","end","sort","seekableStarts","start","seekableStart","behindLiveEdge","seekableEnd","atLiveEdge","dispose","registerComponent"],"mappings":"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","file":"../live-tracker.js","sourcesContent":["define([\n    './component',\n    './utils/merge-options',\n    './utils/browser',\n    './utils/fn'\n], function (Component, mergeOptions, browser,  Fn) {\n    'use strict';\n    const defaults = {\n        trackingThreshold: 30,\n        liveTolerance: 15\n    };\n    class LiveTracker extends Component {\n        constructor(player, options) {\n            const options_ = mergeOptions(defaults, options, { createEl: false });\n            super(player, options_);\n            this.reset_();\n            this.on(this.player_, 'durationchange', this.handleDurationchange);\n            if (browser.IE_VERSION && 'hidden' in document && 'visibilityState' in document) {\n                this.on(document, 'visibilitychange', this.handleVisibilityChange);\n            }\n        }\n        handleVisibilityChange() {\n            if (this.player_.duration() !== Infinity) {\n                return;\n            }\n            if (document.hidden) {\n                this.stopTracking();\n            } else {\n                this.startTracking();\n            }\n        }\n        trackLive_() {\n            const seekable = this.player_.seekable();\n            if (!seekable || !seekable.length) {\n                return;\n            }\n            const newTime = Number(window.performance.now().toFixed(4));\n            const deltaTime = this.lastTime_ === -1 ? 0 : (newTime - this.lastTime_) / 1000;\n            this.lastTime_ = newTime;\n            this.pastSeekEnd_ = this.pastSeekEnd() + deltaTime;\n            const liveCurrentTime = this.liveCurrentTime();\n            const currentTime = this.player_.currentTime();\n            let isBehind = this.player_.paused() || this.seekedBehindLive_ || Math.abs(liveCurrentTime - currentTime) > this.options_.liveTolerance;\n            if (!this.timeupdateSeen_ || liveCurrentTime === Infinity) {\n                isBehind = false;\n            }\n            if (isBehind !== this.behindLiveEdge_) {\n                this.behindLiveEdge_ = isBehind;\n                this.trigger('liveedgechange');\n            }\n        }\n        handleDurationchange() {\n            if (this.player_.duration() === Infinity && this.liveWindow() >= this.options_.trackingThreshold) {\n                if (this.player_.options_.liveui) {\n                    this.player_.addClass('vjs-liveui');\n                }\n                this.startTracking();\n            } else {\n                this.player_.removeClass('vjs-liveui');\n                this.stopTracking();\n            }\n        }\n        startTracking() {\n            if (this.isTracking()) {\n                return;\n            }\n            if (!this.timeupdateSeen_) {\n                this.timeupdateSeen_ = this.player_.hasStarted();\n            }\n            this.trackingInterval_ = this.setInterval(this.trackLive_, Fn.UPDATE_REFRESH_INTERVAL);\n            this.trackLive_();\n            this.on(this.player_, [\n                'play',\n                'pause'\n            ], this.trackLive_);\n            if (!this.timeupdateSeen_) {\n                this.one(this.player_, 'play', this.handlePlay);\n                this.one(this.player_, 'timeupdate', this.handleFirstTimeupdate);\n            } else {\n                this.on(this.player_, 'seeked', this.handleSeeked);\n            }\n        }\n        handleFirstTimeupdate() {\n            this.timeupdateSeen_ = true;\n            this.on(this.player_, 'seeked', this.handleSeeked);\n        }\n        handleSeeked() {\n            const timeDiff = Math.abs(this.liveCurrentTime() - this.player_.currentTime());\n            this.seekedBehindLive_ = this.skipNextSeeked_ ? false : timeDiff > 2;\n            this.skipNextSeeked_ = false;\n            this.trackLive_();\n        }\n        handlePlay() {\n            this.one(this.player_, 'timeupdate', this.seekToLiveEdge);\n        }\n        reset_() {\n            this.lastTime_ = -1;\n            this.pastSeekEnd_ = 0;\n            this.lastSeekEnd_ = -1;\n            this.behindLiveEdge_ = true;\n            this.timeupdateSeen_ = false;\n            this.seekedBehindLive_ = false;\n            this.skipNextSeeked_ = false;\n            this.clearInterval(this.trackingInterval_);\n            this.trackingInterval_ = null;\n            this.off(this.player_, [\n                'play',\n                'pause'\n            ], this.trackLive_);\n            this.off(this.player_, 'seeked', this.handleSeeked);\n            this.off(this.player_, 'play', this.handlePlay);\n            this.off(this.player_, 'timeupdate', this.handleFirstTimeupdate);\n            this.off(this.player_, 'timeupdate', this.seekToLiveEdge);\n        }\n        stopTracking() {\n            if (!this.isTracking()) {\n                return;\n            }\n            this.reset_();\n            this.trigger('liveedgechange');\n        }\n        seekableEnd() {\n            const seekable = this.player_.seekable();\n            const seekableEnds = [];\n            let i = seekable ? seekable.length : 0;\n            while (i--) {\n                seekableEnds.push(seekable.end(i));\n            }\n            return seekableEnds.length ? seekableEnds.sort()[seekableEnds.length - 1] : Infinity;\n        }\n        seekableStart() {\n            const seekable = this.player_.seekable();\n            const seekableStarts = [];\n            let i = seekable ? seekable.length : 0;\n            while (i--) {\n                seekableStarts.push(seekable.start(i));\n            }\n            return seekableStarts.length ? seekableStarts.sort()[0] : 0;\n        }\n        liveWindow() {\n            const liveCurrentTime = this.liveCurrentTime();\n            if (liveCurrentTime === Infinity) {\n                return 0;\n            }\n            return liveCurrentTime - this.seekableStart();\n        }\n        isLive() {\n            return this.isTracking();\n        }\n        atLiveEdge() {\n            return !this.behindLiveEdge();\n        }\n        liveCurrentTime() {\n            return this.pastSeekEnd() + this.seekableEnd();\n        }\n        pastSeekEnd() {\n            const seekableEnd = this.seekableEnd();\n            if (this.lastSeekEnd_ !== -1 && seekableEnd !== this.lastSeekEnd_) {\n                this.pastSeekEnd_ = 0;\n            }\n            this.lastSeekEnd_ = seekableEnd;\n            return this.pastSeekEnd_;\n        }\n        behindLiveEdge() {\n            return this.behindLiveEdge_;\n        }\n        isTracking() {\n            return typeof this.trackingInterval_ === 'number';\n        }\n        seekToLiveEdge() {\n            this.seekedBehindLive_ = false;\n            if (this.atLiveEdge()) {\n                return;\n            }\n            this.skipNextSeeked_ = true;\n            this.player_.currentTime(this.liveCurrentTime());\n        }\n        dispose() {\n            this.off(document, 'visibilitychange', this.handleVisibilityChange);\n            this.stopTracking();\n            super.dispose();\n        }\n    }\n    Component.registerComponent('LiveTracker', LiveTracker);\n    return LiveTracker;\n});"]}