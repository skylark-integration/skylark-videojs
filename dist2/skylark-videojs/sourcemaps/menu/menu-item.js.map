{"version":3,"sources":["menu/menu-item.js"],"names":["define","ClickableComponent","Component","obj","MenuKeys","keycode","MenuItem","[object Object]","player","options","super","this","selectable","isSelected_","selected","multiSelectable","el_","setAttribute","type","props","attrs","nonIconControl","createEl","assign","className","innerHTML","localize","options_","label","tabIndex","event","some","key","isEventKey","handleKeyDown","addClass","controlText","removeClass","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,yBACA,eACA,eACA,cACA,oBACD,SAAUC,EAAoBC,EAAWC,EAAKC,EAAUC,GACvD,mBACMC,UAAiBL,EACnBM,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdE,KAAKC,WAAaH,EAAQG,WAC1BD,KAAKE,YAAcJ,EAAQK,WAAY,EACvCH,KAAKI,gBAAkBN,EAAQM,gBAC/BJ,KAAKG,SAASH,KAAKE,aACfF,KAAKC,WACDD,KAAKI,gBACLJ,KAAKK,IAAIC,aAAa,OAAQ,oBAE9BN,KAAKK,IAAIC,aAAa,OAAQ,iBAGlCN,KAAKK,IAAIC,aAAa,OAAQ,YAGtCV,SAASW,EAAMC,EAAOC,GAElB,OADAT,KAAKU,gBAAiB,EACfX,MAAMY,SAAS,KAAMnB,EAAIoB,QAC5BC,UAAW,gBACXC,8CAAgDd,KAAKe,SAASf,KAAKgB,SAASC,gBAC5EC,UAAW,GACZV,GAAQC,GAEfb,cAAcuB,GACL1B,EAAS2B,KAAKC,GAAO3B,EAAQ4B,WAAWH,EAAOE,KAChDtB,MAAMwB,cAAcJ,GAG5BvB,YAAYuB,GACRnB,KAAKG,UAAS,GAElBP,SAASO,GACDH,KAAKC,aACDE,GACAH,KAAKwB,SAAS,gBACdxB,KAAKK,IAAIC,aAAa,eAAgB,QACtCN,KAAKyB,YAAY,cACjBzB,KAAKE,aAAc,IAEnBF,KAAK0B,YAAY,gBACjB1B,KAAKK,IAAIC,aAAa,eAAgB,SACtCN,KAAKyB,YAAY,IACjBzB,KAAKE,aAAc,KAMnC,OADAX,EAAUoC,kBAAkB,WAAYhC,GACjCA","file":"../../menu/menu-item.js","sourcesContent":["define([\n    '../clickable-component',\n    '../component',\n    '../utils/obj',\n    './menu-keys',\n    '../utils/keycode'\n], function (ClickableComponent, Component, obj, MenuKeys, keycode) {\n    'use strict';\n    class MenuItem extends ClickableComponent {\n        constructor(player, options) {\n            super(player, options);\n            this.selectable = options.selectable;\n            this.isSelected_ = options.selected || false;\n            this.multiSelectable = options.multiSelectable;\n            this.selected(this.isSelected_);\n            if (this.selectable) {\n                if (this.multiSelectable) {\n                    this.el_.setAttribute('role', 'menuitemcheckbox');\n                } else {\n                    this.el_.setAttribute('role', 'menuitemradio');\n                }\n            } else {\n                this.el_.setAttribute('role', 'menuitem');\n            }\n        }\n        createEl(type, props, attrs) {\n            this.nonIconControl = true;\n            return super.createEl('li', obj.assign({\n                className: 'vjs-menu-item',\n                innerHTML: `<span class=\"vjs-menu-item-text\">${ this.localize(this.options_.label) }</span>`,\n                tabIndex: -1\n            }, props), attrs);\n        }\n        handleKeyDown(event) {\n            if (!MenuKeys.some(key => keycode.isEventKey(event, key))) {\n                super.handleKeyDown(event);\n            }\n        }\n        handleClick(event) {\n            this.selected(true);\n        }\n        selected(selected) {\n            if (this.selectable) {\n                if (selected) {\n                    this.addClass('vjs-selected');\n                    this.el_.setAttribute('aria-checked', 'true');\n                    this.controlText(', selected');\n                    this.isSelected_ = true;\n                } else {\n                    this.removeClass('vjs-selected');\n                    this.el_.setAttribute('aria-checked', 'false');\n                    this.controlText('');\n                    this.isSelected_ = false;\n                }\n            }\n        }\n    }\n    Component.registerComponent('MenuItem', MenuItem);\n    return MenuItem;\n});"]}