{"version":3,"sources":["clickable-component.js"],"names":["define","Component","Dom","log","obj","keycode","ClickableComponent","[object Object]","player","options","super","this","emitTapEvents","enable","tag","props","attributes","assign","innerHTML","className","buildCSSClass","tabIndex","error","role","tabIndex_","el","createEl","createControlTextEl","controlTextEl_","dispose","aria-live","appendChild","controlText","controlText_","text","undefined","localizedText","localize","textContent","nonIconControl","setAttribute","enabled_","removeClass","el_","on","handleClick","handleKeyDown","addClass","removeAttribute","off","handleMouseOver","handleMouseOut","event","options_","clickHandler","call","arguments","isEventKey","preventDefault","stopPropagation","trigger","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,cACA,cACA,cACA,cACA,mBACD,SAAUC,EAAWC,EAAKC,EAAKC,EAAKC,GACnC,mBACMC,UAA2BL,EAC7BM,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdE,KAAKC,gBACLD,KAAKE,SAETN,SAASO,EAAM,MAAOC,KAAYC,MAC9BD,EAAQX,EAAIa,QACRC,UAAW,gEACXC,UAAWR,KAAKS,gBAChBC,SAAU,GACXN,GACS,WAARD,GACAX,EAAImB,+DAAgER,6CAExEE,EAAaZ,EAAIa,QAASM,KAAM,UAAYP,GAC5CL,KAAKa,UAAYT,EAAMM,SACvB,MAAMI,EAAKf,MAAMgB,SAASZ,EAAKC,EAAOC,GAEtC,OADAL,KAAKgB,oBAAoBF,GAClBA,EAEXlB,UACII,KAAKiB,eAAiB,KACtBlB,MAAMmB,UAEVtB,oBAAoBkB,GAMhB,OALAd,KAAKiB,eAAiB1B,EAAIwB,SAAS,QAAUP,UAAW,qBAAwBW,YAAa,WACzFL,GACAA,EAAGM,YAAYpB,KAAKiB,gBAExBjB,KAAKqB,YAAYrB,KAAKsB,aAAcR,GAC7Bd,KAAKiB,eAEhBrB,YAAY2B,EAAMT,EAAKd,KAAKc,MACxB,QAAaU,IAATD,EACA,OAAOvB,KAAKsB,cAAgB,YAEhC,MAAMG,EAAgBzB,KAAK0B,SAASH,GACpCvB,KAAKsB,aAAeC,EACpBhC,EAAIoC,YAAY3B,KAAKiB,eAAgBQ,GAChCzB,KAAK4B,gBACNd,EAAGe,aAAa,QAASJ,GAGjC7B,gBACI,gCAAkCG,MAAMU,kBAE5Cb,SACSI,KAAK8B,WACN9B,KAAK8B,UAAW,EAChB9B,KAAK+B,YAAY,gBACjB/B,KAAKgC,IAAIH,aAAa,gBAAiB,cACT,IAAnB7B,KAAKa,WACZb,KAAKgC,IAAIH,aAAa,WAAY7B,KAAKa,WAE3Cb,KAAKiC,IACD,MACA,SACDjC,KAAKkC,aACRlC,KAAKiC,GAAG,UAAWjC,KAAKmC,gBAGhCvC,UACII,KAAK8B,UAAW,EAChB9B,KAAKoC,SAAS,gBACdpC,KAAKgC,IAAIH,aAAa,gBAAiB,aACT,IAAnB7B,KAAKa,WACZb,KAAKgC,IAAIK,gBAAgB,YAE7BrC,KAAKsC,IAAI,YAAatC,KAAKuC,iBAC3BvC,KAAKsC,IAAI,WAAYtC,KAAKwC,gBAC1BxC,KAAKsC,KACD,MACA,SACDtC,KAAKkC,aACRlC,KAAKsC,IAAI,UAAWtC,KAAKmC,eAE7BvC,uBACII,KAAKqB,YAAYrB,KAAKsB,cAE1B1B,YAAY6C,GACJzC,KAAK0C,SAASC,cACd3C,KAAK0C,SAASC,aAAaC,KAAK5C,KAAM6C,WAG9CjD,cAAc6C,GACN/C,EAAQoD,WAAWL,EAAO,UAAY/C,EAAQoD,WAAWL,EAAO,UAChEA,EAAMM,iBACNN,EAAMO,kBACNhD,KAAKiD,QAAQ,UAEblD,MAAMoC,cAAcM,IAKhC,OADAnD,EAAU4D,kBAAkB,qBAAsBvD,GAC3CA","file":"../clickable-component.js","sourcesContent":["define([\n    './component',\n    './utils/dom',\n    './utils/log',\n    './utils/obj',\n    './utils/keycode'\n], function (Component, Dom, log, obj, keycode) {\n    'use strict';\n    class ClickableComponent extends Component {\n        constructor(player, options) {\n            super(player, options);\n            this.emitTapEvents();\n            this.enable();\n        }\n        createEl(tag = 'div', props = {}, attributes = {}) {\n            props = obj.assign({\n                innerHTML: '<span aria-hidden=\"true\" class=\"vjs-icon-placeholder\"></span>',\n                className: this.buildCSSClass(),\n                tabIndex: 0\n            }, props);\n            if (tag === 'button') {\n                log.error(`Creating a ClickableComponent with an HTML element of ${ tag } is not supported; use a Button instead.`);\n            }\n            attributes = obj.assign({ role: 'button' }, attributes);\n            this.tabIndex_ = props.tabIndex;\n            const el = super.createEl(tag, props, attributes);\n            this.createControlTextEl(el);\n            return el;\n        }\n        dispose() {\n            this.controlTextEl_ = null;\n            super.dispose();\n        }\n        createControlTextEl(el) {\n            this.controlTextEl_ = Dom.createEl('span', { className: 'vjs-control-text' }, { 'aria-live': 'polite' });\n            if (el) {\n                el.appendChild(this.controlTextEl_);\n            }\n            this.controlText(this.controlText_, el);\n            return this.controlTextEl_;\n        }\n        controlText(text, el = this.el()) {\n            if (text === undefined) {\n                return this.controlText_ || 'Need Text';\n            }\n            const localizedText = this.localize(text);\n            this.controlText_ = text;\n            Dom.textContent(this.controlTextEl_, localizedText);\n            if (!this.nonIconControl) {\n                el.setAttribute('title', localizedText);\n            }\n        }\n        buildCSSClass() {\n            return `vjs-control vjs-button ${ super.buildCSSClass() }`;\n        }\n        enable() {\n            if (!this.enabled_) {\n                this.enabled_ = true;\n                this.removeClass('vjs-disabled');\n                this.el_.setAttribute('aria-disabled', 'false');\n                if (typeof this.tabIndex_ !== 'undefined') {\n                    this.el_.setAttribute('tabIndex', this.tabIndex_);\n                }\n                this.on([\n                    'tap',\n                    'click'\n                ], this.handleClick);\n                this.on('keydown', this.handleKeyDown);\n            }\n        }\n        disable() {\n            this.enabled_ = false;\n            this.addClass('vjs-disabled');\n            this.el_.setAttribute('aria-disabled', 'true');\n            if (typeof this.tabIndex_ !== 'undefined') {\n                this.el_.removeAttribute('tabIndex');\n            }\n            this.off('mouseover', this.handleMouseOver);\n            this.off('mouseout', this.handleMouseOut);\n            this.off([\n                'tap',\n                'click'\n            ], this.handleClick);\n            this.off('keydown', this.handleKeyDown);\n        }\n        handleLanguagechange() {\n            this.controlText(this.controlText_);\n        }\n        handleClick(event) {\n            if (this.options_.clickHandler) {\n                this.options_.clickHandler.call(this, arguments);\n            }\n        }\n        handleKeyDown(event) {\n            if (keycode.isEventKey(event, 'Space') || keycode.isEventKey(event, 'Enter')) {\n                event.preventDefault();\n                event.stopPropagation();\n                this.trigger('click');\n            } else {\n                super.handleKeyDown(event);\n            }\n        }\n    }\n    Component.registerComponent('ClickableComponent', ClickableComponent);\n    return ClickableComponent;\n});"]}