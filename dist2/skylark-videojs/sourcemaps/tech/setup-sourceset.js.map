{"version":3,"sources":["tech/setup-sourceset.js"],"names":["define","document","mergeOptions","url","sourcesetLoad","tech","el","hasAttribute","triggerSourceset","src","sources","$$","srcUrls","length","i","indexOf","push","innerHTMLDescriptorPolyfill","Object","defineProperty","[object Object]","this","cloneNode","innerHTML","v","dummy","createElement","nodeName","toLowerCase","docFrag","createDocumentFragment","childNodes","appendChild","innerText","window","Element","prototype","call","getDescriptor","priority","prop","descriptor","getOwnPropertyDescriptor","set","get","enumerable","configurable","firstSourceWatch","resetSourceWatch_","old","innerDescriptor","HTMLMediaElement","getInnerHTMLDescriptor","appendWrapper","appendFn","args","retval","apply","forEach","k","keys","one","srcDescriptorPolyfill","getAbsoluteURL","getAttribute","setAttribute","featuresSourceset","resetSourceset_","srcDescriptor","getSrcDescriptor","oldSetAttribute","oldLoad","load","n","test","currentSrc"],"mappings":";;;;;;;AAAAA,QACI,iCACA,yBACA,gBACD,SAAUC,EAASC,EAAcC,GAChC,aACA,MAAMC,EAAgBC,IAClB,MAAMC,EAAKD,EAAKC,KAChB,GAAIA,EAAGC,aAAa,OAEhB,OADAF,EAAKG,iBAAiBF,EAAGG,MAClB,EAEX,MAAMC,EAAUL,EAAKM,GAAG,UAClBC,KACN,IAAIH,EAAM,GACV,IAAKC,EAAQG,OACT,OAAO,EAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQG,OAAQC,IAAK,CACrC,MAAMX,EAAMO,EAAQI,GAAGL,IACnBN,IAAiC,IAA1BS,EAAQG,QAAQZ,IACvBS,EAAQI,KAAKb,GAGrB,QAAKS,EAAQC,SAGU,IAAnBD,EAAQC,SACRJ,EAAMG,EAAQ,IAElBP,EAAKG,iBAAiBC,IACf,IAELQ,EAA8BC,OAAOC,kBAAmB,aAC1DC,MACI,OAAOC,KAAKC,WAAU,GAAMC,WAEhCH,IAAII,GACA,MAAMC,EAAQxB,EAASyB,cAAcL,KAAKM,SAASC,eACnDH,EAAMF,UAAYC,EAClB,MAAMK,EAAU5B,EAAS6B,yBACzB,KAAOL,EAAMM,WAAWlB,QACpBgB,EAAQG,YAAYP,EAAMM,WAAW,IAIzC,OAFAV,KAAKY,UAAY,GACjBC,OAAOC,QAAQC,UAAUJ,YAAYK,KAAKhB,KAAMQ,GACzCR,KAAKE,aAGde,EAAgB,CAACC,EAAUC,KAC7B,IAAIC,KACJ,IAAK,IAAI3B,EAAI,EAAGA,EAAIyB,EAAS1B,WACzB4B,EAAavB,OAAOwB,yBAAyBH,EAASzB,GAAI0B,KACxCC,EAAWE,KAAOF,EAAWG,KAFd9B,KAQrC,OAFA2B,EAAWI,YAAa,EACxBJ,EAAWK,cAAe,EACnBL,GAQLM,EAAmB,SAAU1C,GAC/B,MAAMC,EAAKD,EAAKC,KAChB,GAAIA,EAAG0C,kBACH,OAEJ,MAAMC,KACAC,EAZqB7C,CAAAA,GAAQiC,GACnCjC,EAAKC,KACL4B,OAAOiB,iBAAiBf,UACxBF,OAAOC,QAAQC,UACfnB,GACD,aAOyBmC,CAAuB/C,GACzCgD,EAAgBC,GAAY,IAAIC,KAClC,MAAMC,EAASF,EAASG,MAAMnD,EAAIiD,GAElC,OADAnD,EAAcC,GACPmD,IAGP,SACA,cACA,sBACFE,QAAQC,IACDrD,EAAGqD,KAGRV,EAAIU,GAAKrD,EAAGqD,GACZrD,EAAGqD,GAAKN,EAAcJ,EAAIU,OAE9BzC,OAAOC,eAAeb,EAAI,YAAaJ,EAAagD,GAAmBP,IAAKU,EAAcH,EAAgBP,QAC1GrC,EAAG0C,kBAAoB,MACnB1C,EAAG0C,kBAAoB,KACvB9B,OAAO0C,KAAKX,GAAKS,QAAQC,IACrBrD,EAAGqD,GAAKV,EAAIU,KAEhBzC,OAAOC,eAAeb,EAAI,YAAa4C,KAE3C7C,EAAKwD,IAAI,YAAavD,EAAG0C,oBAEvBc,EAAwB5C,OAAOC,kBAAmB,OACpDC,MACI,OAAIC,KAAKd,aAAa,OACXJ,EAAI4D,eAAe7B,OAAOC,QAAQC,UAAU4B,aAAa3B,KAAKhB,KAAM,QAExE,IAEXD,IAAII,GAEA,OADAU,OAAOC,QAAQC,UAAU6B,aAAa5B,KAAKhB,KAAM,MAAOG,GACjDA,KAwDf,OAhDuB,SAAUnB,GAC7B,IAAKA,EAAK6D,kBACN,OAEJ,MAAM5D,EAAKD,EAAKC,KAChB,GAAIA,EAAG6D,gBACH,OAEJ,MAAMC,EAbe/D,CAAAA,GAAQiC,GAC7BjC,EAAKC,KACL4B,OAAOiB,iBAAiBf,UACxB0B,GACD,OASuBO,CAAiBhE,GACjCiE,EAAkBhE,EAAG2D,aACrBM,EAAUjE,EAAGkE,KACnBtD,OAAOC,eAAeb,EAAI,MAAOJ,EAAakE,GAC1CzB,IAAKnB,IACD,MAAMgC,EAASY,EAAczB,IAAIN,KAAK/B,EAAIkB,GAE1C,OADAnB,EAAKG,iBAAiBF,EAAGG,KAClB+C,MAGflD,EAAG2D,aAAe,EAACQ,EAAGjD,KAClB,MAAMgC,EAASc,EAAgBjC,KAAK/B,EAAImE,EAAGjD,GAI3C,MAHI,OAAOkD,KAAKD,IACZpE,EAAKG,iBAAiBF,EAAGG,KAEtB+C,IAEXlD,EAAGkE,KAAO,MACN,MAAMhB,EAASe,EAAQlC,KAAK/B,GAK5B,OAJKF,EAAcC,KACfA,EAAKG,iBAAiB,IACtBuC,EAAiB1C,IAEdmD,IAEPlD,EAAGqE,WACHtE,EAAKG,iBAAiBF,EAAGqE,YACjBvE,EAAcC,IACtB0C,EAAiB1C,GAErBC,EAAG6D,gBAAkB,MACjB7D,EAAG6D,gBAAkB,KACrB7D,EAAGkE,KAAOD,EACVjE,EAAG2D,aAAeK,EAClBpD,OAAOC,eAAeb,EAAI,MAAO8D,GAC7B9D,EAAG0C,mBACH1C,EAAG0C","file":"../../tech/setup-sourceset.js","sourcesContent":["define([\n    'skylark-langx-globals/document',\n    '../utils/merge-options',\n    '../utils/url'\n], function (document,mergeOptions, url) {\n    'use strict';\n    const sourcesetLoad = tech => {\n        const el = tech.el();\n        if (el.hasAttribute('src')) {\n            tech.triggerSourceset(el.src);\n            return true;\n        }\n        const sources = tech.$$('source');\n        const srcUrls = [];\n        let src = '';\n        if (!sources.length) {\n            return false;\n        }\n        for (let i = 0; i < sources.length; i++) {\n            const url = sources[i].src;\n            if (url && srcUrls.indexOf(url) === -1) {\n                srcUrls.push(url);\n            }\n        }\n        if (!srcUrls.length) {\n            return false;\n        }\n        if (srcUrls.length === 1) {\n            src = srcUrls[0];\n        }\n        tech.triggerSourceset(src);\n        return true;\n    };\n    const innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {\n        get() {\n            return this.cloneNode(true).innerHTML;\n        },\n        set(v) {\n            const dummy = document.createElement(this.nodeName.toLowerCase());\n            dummy.innerHTML = v;\n            const docFrag = document.createDocumentFragment();\n            while (dummy.childNodes.length) {\n                docFrag.appendChild(dummy.childNodes[0]);\n            }\n            this.innerText = '';\n            window.Element.prototype.appendChild.call(this, docFrag);\n            return this.innerHTML;\n        }\n    });\n    const getDescriptor = (priority, prop) => {\n        let descriptor = {};\n        for (let i = 0; i < priority.length; i++) {\n            descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);\n            if (descriptor && descriptor.set && descriptor.get) {\n                break;\n            }\n        }\n        descriptor.enumerable = true;\n        descriptor.configurable = true;\n        return descriptor;\n    };\n    const getInnerHTMLDescriptor = tech => getDescriptor([\n        tech.el(),\n        window.HTMLMediaElement.prototype,\n        window.Element.prototype,\n        innerHTMLDescriptorPolyfill\n    ], 'innerHTML');\n    const firstSourceWatch = function (tech) {\n        const el = tech.el();\n        if (el.resetSourceWatch_) {\n            return;\n        }\n        const old = {};\n        const innerDescriptor = getInnerHTMLDescriptor(tech);\n        const appendWrapper = appendFn => (...args) => {\n            const retval = appendFn.apply(el, args);\n            sourcesetLoad(tech);\n            return retval;\n        };\n        [\n            'append',\n            'appendChild',\n            'insertAdjacentHTML'\n        ].forEach(k => {\n            if (!el[k]) {\n                return;\n            }\n            old[k] = el[k];\n            el[k] = appendWrapper(old[k]);\n        });\n        Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, { set: appendWrapper(innerDescriptor.set) }));\n        el.resetSourceWatch_ = () => {\n            el.resetSourceWatch_ = null;\n            Object.keys(old).forEach(k => {\n                el[k] = old[k];\n            });\n            Object.defineProperty(el, 'innerHTML', innerDescriptor);\n        };\n        tech.one('sourceset', el.resetSourceWatch_);\n    };\n    const srcDescriptorPolyfill = Object.defineProperty({}, 'src', {\n        get() {\n            if (this.hasAttribute('src')) {\n                return url.getAbsoluteURL(window.Element.prototype.getAttribute.call(this, 'src'));\n            }\n            return '';\n        },\n        set(v) {\n            window.Element.prototype.setAttribute.call(this, 'src', v);\n            return v;\n        }\n    });\n    const getSrcDescriptor = tech => getDescriptor([\n        tech.el(),\n        window.HTMLMediaElement.prototype,\n        srcDescriptorPolyfill\n    ], 'src');\n    const setupSourceset = function (tech) {\n        if (!tech.featuresSourceset) {\n            return;\n        }\n        const el = tech.el();\n        if (el.resetSourceset_) {\n            return;\n        }\n        const srcDescriptor = getSrcDescriptor(tech);\n        const oldSetAttribute = el.setAttribute;\n        const oldLoad = el.load;\n        Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {\n            set: v => {\n                const retval = srcDescriptor.set.call(el, v);\n                tech.triggerSourceset(el.src);\n                return retval;\n            }\n        }));\n        el.setAttribute = (n, v) => {\n            const retval = oldSetAttribute.call(el, n, v);\n            if (/src/i.test(n)) {\n                tech.triggerSourceset(el.src);\n            }\n            return retval;\n        };\n        el.load = () => {\n            const retval = oldLoad.call(el);\n            if (!sourcesetLoad(tech)) {\n                tech.triggerSourceset('');\n                firstSourceWatch(tech);\n            }\n            return retval;\n        };\n        if (el.currentSrc) {\n            tech.triggerSourceset(el.currentSrc);\n        } else if (!sourcesetLoad(tech)) {\n            firstSourceWatch(tech);\n        }\n        el.resetSourceset_ = () => {\n            el.resetSourceset_ = null;\n            el.load = oldLoad;\n            el.setAttribute = oldSetAttribute;\n            Object.defineProperty(el, 'src', srcDescriptor);\n            if (el.resetSourceWatch_) {\n                el.resetSourceWatch_();\n            }\n        };\n    };\n    return setupSourceset;\n});"]}