{"version":3,"sources":["control-bar/progress-control/time-tooltip.js"],"names":["define","Component","Dom","formatTime","Fn","TimeTooltip","[object Object]","player","options","super","this","update","throttle","bind","UPDATE_REFRESH_INTERVAL","createEl","className","aria-hidden","seekBarRect","seekBarPoint","content","tooltipRect","findPosition","el_","playerRect","getBoundingClientRect","player_","el","seekBarPointPx","width","spaceLeftOfPoint","left","spaceRightOfPoint","right","pullTooltipBy","Math","round","style","write","textContent","time","cb","requestNamedAnimationFrame","duration","liveTracker","isLive","liveWindow","secondsBehind","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,kBACA,kBACA,0BACA,kBACD,SAAUC,EAAWC,EAAKC,EAAYC,GACrC,mBACMC,UAAoBJ,EACtBK,YAAYC,EAAQC,GAChBC,MAAMF,EAAQC,GACdE,KAAKC,OAASP,EAAGQ,SAASR,EAAGS,KAAKH,KAAMA,KAAKC,QAASP,EAAGU,yBAE7DR,WACI,OAAOG,MAAMM,SAAS,OAASC,UAAW,qBAAwBC,cAAe,SAErFX,OAAOY,EAAaC,EAAcC,GAC9B,MAAMC,EAAcnB,EAAIoB,aAAaZ,KAAKa,KACpCC,EAAatB,EAAIuB,sBAAsBf,KAAKgB,QAAQC,MACpDC,EAAiBV,EAAYW,MAAQV,EAC3C,IAAKK,IAAeH,EAChB,OAEJ,MAAMS,EAAmBZ,EAAYa,KAAOP,EAAWO,KAAOH,EACxDI,EAAoBd,EAAYW,MAAQD,GAAkBJ,EAAWS,MAAQf,EAAYe,OAC/F,IAAIC,EAAgBb,EAAYQ,MAAQ,EACpCC,EAAmBI,EACnBA,GAAiBA,EAAgBJ,EAC1BE,EAAoBE,IAC3BA,EAAgBF,GAEhBE,EAAgB,EAChBA,EAAgB,EACTA,EAAgBb,EAAYQ,QACnCK,EAAgBb,EAAYQ,OAEhCK,EAAgBC,KAAKC,MAAMF,GAC3BxB,KAAKa,IAAIc,MAAMJ,UAAaC,MAC5BxB,KAAK4B,MAAMlB,GAEfd,MAAMc,GACFlB,EAAIqC,YAAY7B,KAAKa,IAAKH,GAE9Bd,WAAWY,EAAaC,EAAcqB,EAAMC,GACxC/B,KAAKgC,2BAA2B,yBAA0B,KACtD,IAAItB,EACJ,MAAMuB,EAAWjC,KAAKgB,QAAQiB,WAC9B,GAAIjC,KAAKgB,QAAQkB,aAAelC,KAAKgB,QAAQkB,YAAYC,SAAU,CAC/D,MAAMC,EAAapC,KAAKgB,QAAQkB,YAAYE,aACtCC,EAAgBD,EAAa3B,EAAe2B,EAClD1B,GAAW2B,EAAgB,EAAI,GAAK,KAAO5C,EAAW4C,EAAeD,QAErE1B,EAAUjB,EAAWqC,EAAMG,GAE/BjC,KAAKC,OAAOO,EAAaC,EAAcC,GACnCqB,GACAA,OAMhB,OADAxC,EAAU+C,kBAAkB,cAAe3C,GACpCA","file":"../../../control-bar/progress-control/time-tooltip.js","sourcesContent":["define([\n    '../../component',\n    '../../utils/dom',\n    '../../utils/format-time',\n    '../../utils/fn'\n], function (Component, Dom, formatTime, Fn) {\n    'use strict';\n    class TimeTooltip extends Component {\n        constructor(player, options) {\n            super(player, options);\n            this.update = Fn.throttle(Fn.bind(this, this.update), Fn.UPDATE_REFRESH_INTERVAL);\n        }\n        createEl() {\n            return super.createEl('div', { className: 'vjs-time-tooltip' }, { 'aria-hidden': 'true' });\n        }\n        update(seekBarRect, seekBarPoint, content) {\n            const tooltipRect = Dom.findPosition(this.el_);\n            const playerRect = Dom.getBoundingClientRect(this.player_.el());\n            const seekBarPointPx = seekBarRect.width * seekBarPoint;\n            if (!playerRect || !tooltipRect) {\n                return;\n            }\n            const spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;\n            const spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);\n            let pullTooltipBy = tooltipRect.width / 2;\n            if (spaceLeftOfPoint < pullTooltipBy) {\n                pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;\n            } else if (spaceRightOfPoint < pullTooltipBy) {\n                pullTooltipBy = spaceRightOfPoint;\n            }\n            if (pullTooltipBy < 0) {\n                pullTooltipBy = 0;\n            } else if (pullTooltipBy > tooltipRect.width) {\n                pullTooltipBy = tooltipRect.width;\n            }\n            pullTooltipBy = Math.round(pullTooltipBy);\n            this.el_.style.right = `-${ pullTooltipBy }px`;\n            this.write(content);\n        }\n        write(content) {\n            Dom.textContent(this.el_, content);\n        }\n        updateTime(seekBarRect, seekBarPoint, time, cb) {\n            this.requestNamedAnimationFrame('TimeTooltip#updateTime', () => {\n                let content;\n                const duration = this.player_.duration();\n                if (this.player_.liveTracker && this.player_.liveTracker.isLive()) {\n                    const liveWindow = this.player_.liveTracker.liveWindow();\n                    const secondsBehind = liveWindow - seekBarPoint * liveWindow;\n                    content = (secondsBehind < 1 ? '' : '-') + formatTime(secondsBehind, liveWindow);\n                } else {\n                    content = formatTime(time, duration);\n                }\n                this.update(seekBarRect, seekBarPoint, content);\n                if (cb) {\n                    cb();\n                }\n            });\n        }\n    }\n    Component.registerComponent('TimeTooltip', TimeTooltip);\n    return TimeTooltip;\n});"]}