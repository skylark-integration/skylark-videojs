{"version":3,"sources":["control-bar/text-track-controls/text-track-menu-item.js"],"names":["define","document","MenuItem","Component","TextTrackMenuItem","[object Object]","player","options","track","tracks","textTracks","label","language","selected","mode","super","this","kinds","kind","filter","Boolean","changeHandler","args","handleTracksChange","apply","selectedLanguageChangeHandler","handleSelectedLanguageChange","on","addEventListener","off","removeEventListener","undefined","onchange","event","window","Event","err","createEvent","initEvent","dispatchEvent","referenceTrack","player_","handleClick","i","length","indexOf","shouldBeSelected","isSelected_","selectedLanguage","cache_","enabled","dispose","registerComponent"],"mappings":";;;;;;;AAAAA,QACI,iCACA,uBACA,mBACD,SAAUC,EAASC,EAAUC,GAC5B,mBACMC,UAA0BF,EAC5BG,YAAYC,EAAQC,GAChB,MAAMC,EAAQD,EAAQC,MAChBC,EAASH,EAAOI,aACtBH,EAAQI,MAAQH,EAAMG,OAASH,EAAMI,UAAY,UACjDL,EAAQM,SAA0B,YAAfL,EAAMM,KACzBC,MAAMT,EAAQC,GACdS,KAAKR,MAAQA,EACbQ,KAAKC,OAASV,EAAQU,QAAUV,EAAQW,MAAQF,KAAKR,MAAMU,OAAOC,OAAOC,SACzE,MAAMC,EAAgB,IAAIC,KACtBN,KAAKO,mBAAmBC,MAAMR,KAAMM,IAElCG,EAAgC,IAAIH,KACtCN,KAAKU,6BAA6BF,MAAMR,KAAMM,IAgBlD,GAdAhB,EAAOqB,IACH,YACA,mBACDN,GACHZ,EAAOmB,iBAAiB,SAAUP,GAClCZ,EAAOmB,iBAAiB,yBAA0BH,GAClDT,KAAKW,GAAG,UAAW,WACfrB,EAAOuB,KACH,YACA,mBACDR,GACHZ,EAAOqB,oBAAoB,SAAUT,GACrCZ,EAAOqB,oBAAoB,yBAA0BL,UAEjCM,IAApBtB,EAAOuB,SAAwB,CAC/B,IAAIC,EACJjB,KAAKW,IACD,MACA,SACD,WACC,GAA4B,iBAAjBO,OAAOC,MACd,IACIF,EAAQ,IAAIC,OAAOC,MAAM,UAC3B,MAAOC,IAGRH,IACDA,EAAQhC,EAASoC,YAAY,UACvBC,UAAU,UAAU,GAAM,GAEpC7B,EAAO8B,cAAcN,KAG7BjB,KAAKO,qBAETlB,YAAY4B,GACR,MAAMO,EAAiBxB,KAAKR,MACtBC,EAASO,KAAKyB,QAAQ/B,aAE5B,GADAK,MAAM2B,YAAYT,GACbxB,EAGL,IAAK,IAAIkC,EAAI,EAAGA,EAAIlC,EAAOmC,OAAQD,IAAK,CACpC,MAAMnC,EAAQC,EAAOkC,IACmB,IAApC3B,KAAKC,MAAM4B,QAAQrC,EAAMU,QAGzBV,IAAUgC,EACS,YAAfhC,EAAMM,OACNN,EAAMM,KAAO,WAEK,aAAfN,EAAMM,OACbN,EAAMM,KAAO,cAIzBT,mBAAmB4B,GACf,MAAMa,EAAuC,YAApB9B,KAAKR,MAAMM,KAChCgC,IAAqB9B,KAAK+B,aAC1B/B,KAAKH,SAASiC,GAGtBzC,6BAA6B4B,GACzB,GAAwB,YAApBjB,KAAKR,MAAMM,KAAoB,CAC/B,MAAMkC,EAAmBhC,KAAKyB,QAAQQ,OAAOD,iBAC7C,GAAIA,GAAoBA,EAAiBE,SAAWF,EAAiBpC,WAAaI,KAAKR,MAAMI,UAAYoC,EAAiB9B,OAASF,KAAKR,MAAMU,KAC1I,OAEJF,KAAKyB,QAAQQ,OAAOD,kBAChBE,SAAS,EACTtC,SAAUI,KAAKR,MAAMI,SACrBM,KAAMF,KAAKR,MAAMU,OAI7Bb,UACIW,KAAKR,MAAQ,KACbO,MAAMoC,WAId,OADAhD,EAAUiD,kBAAkB,oBAAqBhD,GAC1CA","file":"../../../control-bar/text-track-controls/text-track-menu-item.js","sourcesContent":["define([\n    'skylark-langx-globals/document',\n    '../../menu/menu-item',\n    '../../component'\n], function (document,MenuItem, Component) {\n    'use strict';\n    class TextTrackMenuItem extends MenuItem {\n        constructor(player, options) {\n            const track = options.track;\n            const tracks = player.textTracks();\n            options.label = track.label || track.language || 'Unknown';\n            options.selected = track.mode === 'showing';\n            super(player, options);\n            this.track = track;\n            this.kinds = (options.kinds || [options.kind || this.track.kind]).filter(Boolean);\n            const changeHandler = (...args) => {\n                this.handleTracksChange.apply(this, args);\n            };\n            const selectedLanguageChangeHandler = (...args) => {\n                this.handleSelectedLanguageChange.apply(this, args);\n            };\n            player.on([\n                'loadstart',\n                'texttrackchange'\n            ], changeHandler);\n            tracks.addEventListener('change', changeHandler);\n            tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n            this.on('dispose', function () {\n                player.off([\n                    'loadstart',\n                    'texttrackchange'\n                ], changeHandler);\n                tracks.removeEventListener('change', changeHandler);\n                tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);\n            });\n            if (tracks.onchange === undefined) {\n                let event;\n                this.on([\n                    'tap',\n                    'click'\n                ], function () {\n                    if (typeof window.Event !== 'object') {\n                        try {\n                            event = new window.Event('change');\n                        } catch (err) {\n                        }\n                    }\n                    if (!event) {\n                        event = document.createEvent('Event');\n                        event.initEvent('change', true, true);\n                    }\n                    tracks.dispatchEvent(event);\n                });\n            }\n            this.handleTracksChange();\n        }\n        handleClick(event) {\n            const referenceTrack = this.track;\n            const tracks = this.player_.textTracks();\n            super.handleClick(event);\n            if (!tracks) {\n                return;\n            }\n            for (let i = 0; i < tracks.length; i++) {\n                const track = tracks[i];\n                if (this.kinds.indexOf(track.kind) === -1) {\n                    continue;\n                }\n                if (track === referenceTrack) {\n                    if (track.mode !== 'showing') {\n                        track.mode = 'showing';\n                    }\n                } else if (track.mode !== 'disabled') {\n                    track.mode = 'disabled';\n                }\n            }\n        }\n        handleTracksChange(event) {\n            const shouldBeSelected = this.track.mode === 'showing';\n            if (shouldBeSelected !== this.isSelected_) {\n                this.selected(shouldBeSelected);\n            }\n        }\n        handleSelectedLanguageChange(event) {\n            if (this.track.mode === 'showing') {\n                const selectedLanguage = this.player_.cache_.selectedLanguage;\n                if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {\n                    return;\n                }\n                this.player_.cache_.selectedLanguage = {\n                    enabled: true,\n                    language: this.track.language,\n                    kind: this.track.kind\n                };\n            }\n        }\n        dispose() {\n            this.track = null;\n            super.dispose();\n        }\n    }\n    Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);\n    return TextTrackMenuItem;\n});"]}