{"version":3,"sources":["tracks/text-track-display.js"],"names":["define","Component","Fn","Dom","darkGray","lightGray","fontMap","monospace","sansSerif","serif","monospaceSansSerif","monospaceSerif","proportionalSansSerif","proportionalSerif","casual","script","smallcaps","constructColor","color","opacity","hex","length","Error","slice","parseInt","tryUpdateStyle","el","style","rule","e","TextTrackDisplay","[object Object]","player","options","ready","super","updateDisplayHandler","bind","this","updateDisplay","on","toggleDisplay","preselectTrack","tech_","featuresNativeTextTracks","hide","window","addEventListener","removeEventListener","tracks","options_","playerOptions","i","player_","addRemoteTextTrack","modes","captions","subtitles","trackList","textTracks","userPref","cache_","selectedLanguage","firstDesc","firstCaptions","preferredTrack","track","enabled","language","kind","default","mode","show","createEl","className","aria-live","aria-atomic","WebVTT","processCues","el_","allowMultipleShowingTracks","clearDisplay","showingTracks","push","updateForTrack","descriptionsTrack","captionsSubtitlesTrack","getAttribute","setAttribute","overrides","textTrackSettings","getValues","cues","activeCues","cue","cueDiv","displayState","firstChild","textOpacity","backgroundColor","backgroundOpacity","windowColor","windowOpacity","edgeStyle","textShadow","fontPercent","fontSize","parseFloat","height","top","fontFamily","fontVariant","Array","isArray","every","j","cueEl","addClass","updateDisplayState","registerComponent"],"mappings":"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","file":"../../tracks/text-track-display.js","sourcesContent":["define([\n    '../component',\n    '../utils/fn',\n    '../utils/dom'\n], function (Component, Fn, Dom) {\n    'use strict';\n    const darkGray = '#222';\n    const lightGray = '#ccc';\n    const fontMap = {\n        monospace: 'monospace',\n        sansSerif: 'sans-serif',\n        serif: 'serif',\n        monospaceSansSerif: '\"Andale Mono\", \"Lucida Console\", monospace',\n        monospaceSerif: '\"Courier New\", monospace',\n        proportionalSansSerif: 'sans-serif',\n        proportionalSerif: 'serif',\n        casual: '\"Comic Sans MS\", Impact, fantasy',\n        script: '\"Monotype Corsiva\", cursive',\n        smallcaps: '\"Andale Mono\", \"Lucida Console\", monospace, sans-serif'\n    };\n    function constructColor(color, opacity) {\n        let hex;\n        if (color.length === 4) {\n            hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];\n        } else if (color.length === 7) {\n            hex = color.slice(1);\n        } else {\n            throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');\n        }\n        return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';\n    }\n    function tryUpdateStyle(el, style, rule) {\n        try {\n            el.style[style] = rule;\n        } catch (e) {\n            return;\n        }\n    }\n    class TextTrackDisplay extends Component {\n        constructor(player, options, ready) {\n            super(player, options, ready);\n            const updateDisplayHandler = Fn.bind(this, this.updateDisplay);\n            player.on('loadstart', Fn.bind(this, this.toggleDisplay));\n            player.on('texttrackchange', updateDisplayHandler);\n            player.on('loadedmetadata', Fn.bind(this, this.preselectTrack));\n            player.ready(Fn.bind(this, function () {\n                if (player.tech_ && player.tech_.featuresNativeTextTracks) {\n                    this.hide();\n                    return;\n                }\n                player.on('fullscreenchange', updateDisplayHandler);\n                player.on('playerresize', updateDisplayHandler);\n                window.addEventListener('orientationchange', updateDisplayHandler);\n                player.on('dispose', () => window.removeEventListener('orientationchange', updateDisplayHandler));\n                const tracks = this.options_.playerOptions.tracks || [];\n                for (let i = 0; i < tracks.length; i++) {\n                    this.player_.addRemoteTextTrack(tracks[i], true);\n                }\n                this.preselectTrack();\n            }));\n        }\n        preselectTrack() {\n            const modes = {\n                captions: 1,\n                subtitles: 1\n            };\n            const trackList = this.player_.textTracks();\n            const userPref = this.player_.cache_.selectedLanguage;\n            let firstDesc;\n            let firstCaptions;\n            let preferredTrack;\n            for (let i = 0; i < trackList.length; i++) {\n                const track = trackList[i];\n                if (userPref && userPref.enabled && userPref.language && userPref.language === track.language && track.kind in modes) {\n                    if (track.kind === userPref.kind) {\n                        preferredTrack = track;\n                    } else if (!preferredTrack) {\n                        preferredTrack = track;\n                    }\n                } else if (userPref && !userPref.enabled) {\n                    preferredTrack = null;\n                    firstDesc = null;\n                    firstCaptions = null;\n                } else if (track.default) {\n                    if (track.kind === 'descriptions' && !firstDesc) {\n                        firstDesc = track;\n                    } else if (track.kind in modes && !firstCaptions) {\n                        firstCaptions = track;\n                    }\n                }\n            }\n            if (preferredTrack) {\n                preferredTrack.mode = 'showing';\n            } else if (firstCaptions) {\n                firstCaptions.mode = 'showing';\n            } else if (firstDesc) {\n                firstDesc.mode = 'showing';\n            }\n        }\n        toggleDisplay() {\n            if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {\n                this.hide();\n            } else {\n                this.show();\n            }\n        }\n        createEl() {\n            return super.createEl('div', { className: 'vjs-text-track-display' }, {\n                'aria-live': 'off',\n                'aria-atomic': 'true'\n            });\n        }\n        clearDisplay() {\n            if (typeof window.WebVTT === 'function') {\n                window.WebVTT.processCues(window, [], this.el_);\n            }\n        }\n        updateDisplay() {\n            const tracks = this.player_.textTracks();\n            const allowMultipleShowingTracks = this.options_.allowMultipleShowingTracks;\n            this.clearDisplay();\n            if (allowMultipleShowingTracks) {\n                const showingTracks = [];\n                for (let i = 0; i < tracks.length; ++i) {\n                    const track = tracks[i];\n                    if (track.mode !== 'showing') {\n                        continue;\n                    }\n                    showingTracks.push(track);\n                }\n                this.updateForTrack(showingTracks);\n                return;\n            }\n            let descriptionsTrack = null;\n            let captionsSubtitlesTrack = null;\n            let i = tracks.length;\n            while (i--) {\n                const track = tracks[i];\n                if (track.mode === 'showing') {\n                    if (track.kind === 'descriptions') {\n                        descriptionsTrack = track;\n                    } else {\n                        captionsSubtitlesTrack = track;\n                    }\n                }\n            }\n            if (captionsSubtitlesTrack) {\n                if (this.getAttribute('aria-live') !== 'off') {\n                    this.setAttribute('aria-live', 'off');\n                }\n                this.updateForTrack(captionsSubtitlesTrack);\n            } else if (descriptionsTrack) {\n                if (this.getAttribute('aria-live') !== 'assertive') {\n                    this.setAttribute('aria-live', 'assertive');\n                }\n                this.updateForTrack(descriptionsTrack);\n            }\n        }\n        updateDisplayState(track) {\n            const overrides = this.player_.textTrackSettings.getValues();\n            const cues = track.activeCues;\n            let i = cues.length;\n            while (i--) {\n                const cue = cues[i];\n                if (!cue) {\n                    continue;\n                }\n                const cueDiv = cue.displayState;\n                if (overrides.color) {\n                    cueDiv.firstChild.style.color = overrides.color;\n                }\n                if (overrides.textOpacity) {\n                    tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));\n                }\n                if (overrides.backgroundColor) {\n                    cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;\n                }\n                if (overrides.backgroundOpacity) {\n                    tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));\n                }\n                if (overrides.windowColor) {\n                    if (overrides.windowOpacity) {\n                        tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));\n                    } else {\n                        cueDiv.style.backgroundColor = overrides.windowColor;\n                    }\n                }\n                if (overrides.edgeStyle) {\n                    if (overrides.edgeStyle === 'dropshadow') {\n                        cueDiv.firstChild.style.textShadow = `2px 2px 3px ${ darkGray }, 2px 2px 4px ${ darkGray }, 2px 2px 5px ${ darkGray }`;\n                    } else if (overrides.edgeStyle === 'raised') {\n                        cueDiv.firstChild.style.textShadow = `1px 1px ${ darkGray }, 2px 2px ${ darkGray }, 3px 3px ${ darkGray }`;\n                    } else if (overrides.edgeStyle === 'depressed') {\n                        cueDiv.firstChild.style.textShadow = `1px 1px ${ lightGray }, 0 1px ${ lightGray }, -1px -1px ${ darkGray }, 0 -1px ${ darkGray }`;\n                    } else if (overrides.edgeStyle === 'uniform') {\n                        cueDiv.firstChild.style.textShadow = `0 0 4px ${ darkGray }, 0 0 4px ${ darkGray }, 0 0 4px ${ darkGray }, 0 0 4px ${ darkGray }`;\n                    }\n                }\n                if (overrides.fontPercent && overrides.fontPercent !== 1) {\n                    const fontSize = window.parseFloat(cueDiv.style.fontSize);\n                    cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';\n                    cueDiv.style.height = 'auto';\n                    cueDiv.style.top = 'auto';\n                }\n                if (overrides.fontFamily && overrides.fontFamily !== 'default') {\n                    if (overrides.fontFamily === 'small-caps') {\n                        cueDiv.firstChild.style.fontVariant = 'small-caps';\n                    } else {\n                        cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];\n                    }\n                }\n            }\n        }\n        updateForTrack(tracks) {\n            if (!Array.isArray(tracks)) {\n                tracks = [tracks];\n            }\n            if (typeof window.WebVTT !== 'function' || tracks.every(track => {\n                    return !track.activeCues;\n                })) {\n                return;\n            }\n            const cues = [];\n            for (let i = 0; i < tracks.length; ++i) {\n                const track = tracks[i];\n                for (let j = 0; j < track.activeCues.length; ++j) {\n                    cues.push(track.activeCues[j]);\n                }\n            }\n            window.WebVTT.processCues(window, cues, this.el_);\n            for (let i = 0; i < tracks.length; ++i) {\n                const track = tracks[i];\n                for (let j = 0; j < track.activeCues.length; ++j) {\n                    const cueEl = track.activeCues[j].displayState;\n                    Dom.addClass(cueEl, 'vjs-text-track-cue');\n                    Dom.addClass(cueEl, 'vjs-text-track-cue-' + (track.language ? track.language : i));\n                }\n                if (this.player_.textTrackSettings) {\n                    this.updateDisplayState(track);\n                }\n            }\n        }\n    }\n    \n    Component.registerComponent('TextTrackDisplay', TextTrackDisplay);\n\n\n    TextTrackDisplay.constructColor = constructColor;\n\n    return TextTrackDisplay;\n});"]}